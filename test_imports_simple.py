#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""

def test_basic_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –ë–î"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ utils.request_logger
        print("üì¶ –ò–º–ø–æ—Ä—Ç –∏–∑ utils.request_logger...")
        from utils.request_logger import log_request, log_command, log_conversation_handler
        print("‚úÖ utils.request_logger –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ setup_logging
        print("üì¶ –ò–º–ø–æ—Ä—Ç –∏–∑ setup_logging...")
        from setup_logging import setup_logging
        print("‚úÖ setup_logging –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ analyze_logs
        print("üì¶ –ò–º–ø–æ—Ä—Ç –∏–∑ analyze_logs...")
        from analyze_logs import analyze_logs
        print("‚úÖ analyze_logs –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_syntax():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–æ–≤...")
    
    import ast
    import os
    
    files_to_test = [
        'data_base/db.py',
        'data_base/operations.py',
        'data_base/models.py',
        'utils/request_logger.py',
        'setup_logging.py',
        'analyze_logs.py',
        'commands/start_command.py',
        'commands/get_new_topic.py',
        'commands/new/handlers.py',
        'commands/homework_mentor.py'
    ]
    
    for file_path in files_to_test:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                ast.parse(content)
                print(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except SyntaxError as e:
                print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
                return False
            except Exception as e:
                print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞: {e}")
                return False
        else:
            print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    success1 = test_basic_imports()
    success2 = test_syntax()
    
    if success1 and success2:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        exit(1) 