from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, ContextTypes

from commands.base_function import back_to_main_menu_menti
from commands.google_calendar import create_event
from data_base.models import Student, Mentor
from data_base.db import session
from commands.states import CALL_SCHEDULE_DATE, CALL_SCHEDULE_TIME, CALL_CONFIRMATION, CALL_SCHEDULE


async def request_call(update: Update, context):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫.
    –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """
    user_id = update.message.from_user.id
    student = session.query(Student).filter_by(telegram=f"@{update.message.from_user.username}").first()

    if not student:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    context.user_data["student_telegram"] = student.telegram

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫:",
            reply_markup=ReplyKeyboardMarkup(
                [["–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]],
                one_time_keyboard=True
            )
        )
        return CALL_SCHEDULE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –ù–ï —Ñ—É–ª–ª—Å—Ç–µ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–≤–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return CALL_SCHEDULE_DATE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def handle_direction_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –§—É–ª–ª—Å—Ç–µ–∫-–º–µ–Ω—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏.
    """
    direction = update.message.text
    student_telegram = context.user_data.get("student_telegram")

    if direction == "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        mentor_id = 1
    elif direction == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        mentor_id = 3
    else:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CALL_SCHEDULE  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –≤ –ë–î
    student = session.query(Student).filter_by(telegram=student_telegram).first()
    if student:
        student.mentor_id = mentor_id
        session.commit()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –≤—ã–±–æ—Ä –¥–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–°–µ–≥–æ–¥–Ω—è"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–≤–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':",
        reply_markup=ReplyKeyboardMarkup([["–°–µ–≥–æ–¥–Ω—è"], ["–û—Ç–º–µ–Ω–∞"]], one_time_keyboard=True)
    )
    return CALL_SCHEDULE_DATE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ



async def schedule_call_date(update: Update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è.
    """
    date_text = update.message.text.strip()

    if date_text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
        from datetime import datetime
        date_text = datetime.now().strftime("%d.%m.%Y")

    try:
        from datetime import datetime
        call_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        context.user_data["call_date"] = call_date.strftime("%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return CALL_SCHEDULE_DATE  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ

    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    return CALL_SCHEDULE_TIME  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ



async def schedule_call_time(update: Update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–≤–æ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–ø–∏—Å—å.
    """
    time_text = update.message.text.strip()
    student_telegram = context.user_data.get("student_telegram")
    student = session.query(Student).filter_by(telegram=student_telegram).first()

    if not student:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    mentor = session.query(Mentor).filter_by(id=student.mentor_id).first()
    mentor_name = mentor.full_name if mentor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω—Ç–æ—Ä"
    mentor_tg = mentor.telegram if mentor else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    call_date_time = f"{context.user_data['call_date']} {time_text}"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
    create_event(student.fio, student_telegram, call_date_time)

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {call_date_time}\n"
        f"üßë‚Äçüè´ –í–∞—à –º–µ–Ω—Ç–æ—Ä: {mentor_name} ({mentor_tg})"
    )

    return await back_to_main_menu_menti(update, context)   # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø

