import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler, ContextTypes

from commands.base_function import back_to_main_menu
from commands.states import PAYMENT_CONFIRMATION
from data_base.db import session
from data_base.models import Student, Mentor, Payment
from data_base.operations import update_student_payment, get_student_by_fio_or_telegram



async def show_pending_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    mentor = session.query(Mentor).filter(Mentor.chat_id == str(user_id)).first()

    if not mentor:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    pending_payments = session.query(Payment).filter_by(status="–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω").all()

    if not pending_payments:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return ConversationHandler.END

    message = "üí∞ –ü–ª–∞—Ç–µ–∂–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
    for p in pending_payments:
        message += f"üÜî ID: {p.id}, üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç ID {p.student_id}, üíµ {p.amount} —Ä—É–±., üìÖ {p.payment_date}\n"

    message += "\n‚úè –í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å."

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ context
    context.user_data["pending_payment_ids"] = [p.id for p in pending_payments]

    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        message,
        reply_markup=keyboard
    )
    return PAYMENT_CONFIRMATION


async def check_payment_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):

    payment_id = update.message.text.strip()

    if payment_id.lower() in ["–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await back_to_main_menu(update, context)

    if not payment_id.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞ (—á–∏—Å–ª–æ).")
        return PAYMENT_CONFIRMATION

    payment = session.query(Payment).filter_by(id=int(payment_id)).first()

    if not payment or payment.status != "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
        await update.message.reply_text("‚ö† –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return PAYMENT_CONFIRMATION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context
    context.user_data["payment_id"] = payment.id
    context.user_data["student_id"] = payment.student_id
    context.user_data["amount"] = float(payment.amount)

    keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂"], ["‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂"], ["üîô –û—Ç–º–µ–Ω–∏—Ç—å"]],
        resize_keyboard=True
    )

    await update.message.reply_text(
        f"üÜî –ü–ª–∞—Ç—ë–∂ {payment.id} –Ω–∞ —Å—É–º–º—É {payment.amount:.2f} —Ä—É–±.\n"
        f"–°—Ç—É–¥–µ–Ω—Ç ID: {payment.student_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    return "PAYMENT_DECISION"


async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if update.message.text and update.message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∏—Ç—å", "üîô –æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await update.message.reply_text("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await back_to_main_menu(update, context)
    
    payment_id = context.user_data.get("payment_id")
    student_id = context.user_data.get("student_id")
    amount = context.user_data.get("amount")

    payment = session.query(Payment).get(payment_id)
    student = session.query(Student).get(student_id)

    if not payment or not student:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
    payment.status = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    if payment.comment == "–ö–æ–º–∏—Å—Å–∏—è":
        student.commission_paid = (student.commission_paid or 0) + amount
    else:
        student.payment_amount = (student.payment_amount or 0) + amount
        if student.payment_amount >= (student.total_cost or 0):
            student.fully_paid = "–î–∞"

    # student.payment_amount = (student.payment_amount or 0) + amount

    # ‚úÖ –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –≤—Å—ë ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º fully_paid = "–î–∞"
    if student.payment_amount >= (student.total_cost or 0):
        student.fully_paid = "–î–∞"

    session.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    if student.chat_id:
        await context.bot.send_message(
            chat_id=student.chat_id,
            text=f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ {amount:.2f} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!"
        )

    await update.message.reply_text("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É–º–º–µ –æ–ø–ª–∞—Ç—ã.")
    return await back_to_main_menu(update, context)


async def reject_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if update.message.text and update.message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∏—Ç—å", "üîô –æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await update.message.reply_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await back_to_main_menu(update, context)
    
    payment_id = context.user_data.get("payment_id")
    amount = context.user_data.get("amount")
    student_id = context.user_data.get("student_id")

    payment = session.query(Payment).get(payment_id)
    student = session.query(Student).get(student_id)

    if not payment or not student:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
        return ConversationHandler.END

    payment.status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
    session.commit()

    if student.chat_id:
        await context.bot.send_message(
            chat_id=student.chat_id,
            text=f"‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ {amount:.2f} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )

    await update.message.reply_text("‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    return await back_to_main_menu(update, context)
