import re
from telegram import Update
from telegram.ext import ConversationHandler

from commands.base_function import back_to_main_menu
from data_base.db import session
from data_base.models import Student
from data_base.operations import update_student_payment, get_student_by_fio_or_telegram


async def confirm_or_reject_payment(update: Update, context):
    """–ú–µ–Ω—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É."""
    student_telegram = context.bot_data.get("student_telegram")
    payment_text = context.bot_data.get("payment_text")

    if not student_telegram or not payment_text:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = session.query(Student).filter(Student.telegram == student_telegram).first()
    if not student:
        await update.message.reply_text("‚ö† –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    if not student.mentor_id:
        await update.message.reply_text("‚ö† –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω—Ç–æ—Ä.")
        return ConversationHandler.END

    if not student.chat_id:
        await update.message.reply_text("‚ö† –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id.")
        return ConversationHandler.END

    try:
        amount = float(payment_text)
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.")
        return ConversationHandler.END

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç—ë–∂
        update_student_payment(student.id, amount, student.mentor_id)
    except RuntimeError as e:
        await update.message.reply_text(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return await back_to_main_menu(update, context)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=student.chat_id,
        text=f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!"
    )
    await update.message.reply_text(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –∑–∞–ø–∏—Å–∞–Ω.")
    return await back_to_main_menu(update, context)




async def reject_payment(update: Update, context):
    """–ú–µ–Ω—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂."""
    print("üî¥ reject_payment –≤—ã–∑–≤–∞–Ω!")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    student_telegram = context.bot_data.get("student_telegram")
    payment_text = context.bot_data.get("payment_text")

    if not student_telegram:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç.")
        return ConversationHandler.END

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î
    student = session.query(Student).filter(Student.telegram == student_telegram).first()
    if not student or not student.chat_id:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞.")
        return ConversationHandler.END

    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    try:
        await context.bot.send_message(
            chat_id=student.chat_id,
            text=f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ {payment_text} –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: {str(e)}")

    await update.message.reply_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_text} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    return await back_to_main_menu(update, context)
