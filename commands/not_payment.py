import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from data_base.db import session
from data_base.operations import get_all_students
from data_base.models import Payment, Mentor
import os
from dotenv import load_dotenv
import logging

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
print(TELEGRAM_TOKEN)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/payment_debts.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# üîá –û—Ç–∫–ª—é—á–∞–µ–º SQL-–ª–æ–≥–∏
logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)



async def check_payment_debts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–æ–ª–≥–∞–º–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π –±–æ–ª–µ–µ 30 –¥–Ω–µ–π"""
    bot = Bot(token=TELEGRAM_TOKEN)
    students = get_all_students()
    today = datetime.today().date()
    missing_chat_ids = []
    no_payment_students = []
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)

    for student in students:
        if student.training_status.lower().strip() == "–Ω–µ —É—á–∏—Ç—Å—è":
            continue
        if not student.total_cost or not student.payment_amount:
            continue
        if student.payment_amount >= student.total_cost:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂
        last_payment = (
            session.query(Payment)
            .filter(Payment.student_id == student.id)
            .order_by(Payment.payment_date.desc())
            .first()
        )

        if not last_payment:
            logger.info(f"–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.telegram} –µ—Å—Ç—å –¥–æ–ª–≥ {student.total_cost - student.payment_amount}‚ÇΩ, –Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ payments ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            continue

        if (today - last_payment.payment_date).days > 30:
            if not student.chat_id:
                missing_chat_ids.append(student.telegram)
                continue

            try:
                # await bot.send_message(
                #     chat_id=student.chat_id,
                #     text=(
                #         f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –æ–±—É—á–µ–Ω–∏–µ.\n"
                #         f"–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî {last_payment.payment_date.strftime('%d.%m.%Y')}\n\n"
                #         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂."
                #     )
                # )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É {student.telegram} –æ—Ç {last_payment.payment_date}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç—É–¥–µ–Ω—Ç—É {student.telegram}: {e}")

    if missing_chat_ids:
        admin_mentor = session.query(Mentor).get(1)
        if admin_mentor and admin_mentor.chat_id:
            try:
                text = "‚ö† –°—Ç—É–¥–µ–Ω—Ç—ã –±–µ–∑ chat_id:\n" + "\n".join(missing_chat_ids)
                await bot.send_message(chat_id=admin_mentor.chat_id, text=text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –±–µ–∑ chat_id –∞–¥–º–∏–Ω—É: {e}")

if __name__ == "__main__":
    asyncio.run(check_payment_debts())