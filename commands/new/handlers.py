# commands/submit_topic/handlers.py

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime

from commands.base_function import back_to_main_menu
from commands.states import SUBMIT_TOPIC_SELECT, SUBMIT_TOPIC_STUDENTS
from data_base.db import session
from data_base.models import Student, Mentor, Homework, ManualProgress
from utils.request_logger import log_request, log_conversation_handler
from datetime import datetime

TOPIC_FIELD_MAPPING = {
    "1 –º–æ–¥—É–ª—å": "m1_submission_date",
    "–¢–µ–º–∞ 2.1 + 2.2": "m2_1_2_2_submission_date",
    "–¢–µ–º–∞ 2.3 + 3.1": "m2_3_3_1_submission_date",
    "–¢–µ–º–∞ 3.2": "m3_2_submission_date",
    "–¢–µ–º–∞ 3.3": "m3_3_submission_date",
    "–¢–µ–º–∞ 4.1": "m4_1_submission_date",
    "–¢–µ–º–∞ 4.2 + 4.3": "m4_2_4_3_submission_date",
    "–ú–æ–∫ —ç–∫–∑–∞–º–µ–Ω 4 –º–æ–¥—É–ª—è": "m4_mock_exam_passed_date",
}

AUTO_MODULE_FIELD_MAPPING = {
    "–°–¥–∞—á–∞ 2 –º–æ–¥—É–ª—è": "m2_exam_passed_date",
    "–°–¥–∞—á–∞ 3 –º–æ–¥—É–ª—è": "m3_exam_passed_date",
    "–°–¥–∞—á–∞ 4 –º–æ–¥—É–ª—è": "m4_topic_passed_date",
    "–°–¥–∞—á–∞ 5 –º–æ–¥—É–ª—è": "m5_topic_passed_date",
    "–°–¥–∞—á–∞ 6 –º–æ–¥—É–ª—è": "m6_topic_passed_date",
    "–°–¥–∞—á–∞ 7 –º–æ–¥—É–ª—è": "m7_topic_passed_date",
}


@log_request("start_topic_submission")
async def start_topic_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã (—É–∂–µ —Å –º–æ–¥—É–ª–µ–º)"""
    mentor_tg = "@" + update.message.from_user.username
    from data_base.db import session
    from data_base.models import Mentor
    mentor = session.query(Mentor).filter_by(telegram=mentor_tg).first()
    if not mentor:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä.")
        return await back_to_main_menu(update, context)
    if "–∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in mentor.direction.lower():
        # –ê–≤—Ç–æ-—Ñ–ª–æ—É: –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è 2-7
        auto_modules = [f"–°–¥–∞—á–∞ {i} –º–æ–¥—É–ª—è" for i in range(2, 8)]
        keyboard = [[KeyboardButton(name)] for name in auto_modules]
        keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–∞–ª —Å—Ç—É–¥–µ–Ω—Ç:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        context.user_data["auto_flow"] = True
        return SUBMIT_TOPIC_SELECT
    else:
        # –†—É—á–Ω–æ–π —Ñ–ª–æ—É (—Å—Ç–∞—Ä—ã–π)
        keyboard = [[KeyboardButton(name)] for name in TOPIC_FIELD_MAPPING.keys()]
        keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Å–¥–∞—ë—Ç —Å—Ç—É–¥–µ–Ω—Ç:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        context.user_data["auto_flow"] = False
        return SUBMIT_TOPIC_SELECT

@log_conversation_handler("select_topic")
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        return await back_to_main_menu(update, context)
    if context.user_data.get("auto_flow"):
        auto_modules = [f"–°–¥–∞—á–∞ {i} –º–æ–¥—É–ª—è" for i in range(2, 8)]
        if user_input not in auto_modules:
            keyboard = [[KeyboardButton(name)] for name in auto_modules]
            keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])
            await update.message.reply_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return SUBMIT_TOPIC_SELECT
        context.user_data["selected_auto_module"] = int(user_input.split()[1])
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Telegram —é–∑–µ—Ä–Ω–µ–π–º—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2):")
        return SUBMIT_TOPIC_STUDENTS
    else:
        if user_input not in TOPIC_FIELD_MAPPING:
            keyboard = [[KeyboardButton(name)] for name in TOPIC_FIELD_MAPPING.keys()]
            keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])
            await update.message.reply_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return SUBMIT_TOPIC_SELECT
        context.user_data["selected_topic_label"] = user_input
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Telegram —é–∑–µ—Ä–Ω–µ–π–º—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2):")
        return SUBMIT_TOPIC_STUDENTS

@log_conversation_handler("submit_topic_students")
async def submit_topic_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    usernames = [u.strip() for u in update.message.text.split(",")]
    mentor_tg = "@" + update.message.from_user.username
    from data_base.db import session
    from data_base.models import Mentor, Student, AutoProgress, ManualProgress
    mentor = session.query(Mentor).filter_by(telegram=mentor_tg).first()
    if not mentor:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä.")
        return await back_to_main_menu(update, context)
    found = []
    not_found = []
    already_submitted = []
    if context.user_data.get("auto_flow"):
        # –ê–≤—Ç–æ-—Ñ–ª–æ—É: —Å–¥–∞—á–∞ –º–æ–¥—É–ª—è 2-7
        auto_modules = [f"–°–¥–∞—á–∞ {i} –º–æ–¥—É–ª—è" for i in range(2, 8)]
        selected_label = None
        for label in auto_modules:
            if context.user_data.get("selected_auto_module") == int(label.split()[1]):
                selected_label = label
                break
        field = AUTO_MODULE_FIELD_MAPPING.get(selected_label)
        for username in usernames:
            student = session.query(Student).filter_by(telegram=username).first()
            if student:
                if student.auto_mentor_id != mentor.id:
                    not_found.append(username + " (–Ω–µ –≤–∞—à —Å—Ç—É–¥–µ–Ω—Ç)")
                    continue
                progress = session.query(AutoProgress).filter_by(student_id=student.id).first()
                if not progress:
                    progress = AutoProgress(student_id=student.id)
                    session.add(progress)
                if field and hasattr(progress, field):
                    current_date = getattr(progress, field)
                    if current_date:
                        existing_date = current_date.strftime("%d.%m.%Y") if hasattr(current_date, 'strftime') else str(current_date)
                        already_submitted.append(f"{username} (—Å–¥–∞–ª {existing_date})")
                        continue
                    setattr(progress, field, datetime.now().date())
                    found.append(username)
            else:
                not_found.append(username + " (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        session.commit()
        msg_parts = []
        if found:
            msg_parts.append(f"‚úÖ –ú–æ–¥—É–ª—å —Å–¥–∞–Ω: {', '.join(found)}")
        if already_submitted:
            msg_parts.append(f"‚ÑπÔ∏è –£–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Å–¥–∞–≤—à–∏–µ: {', '.join(already_submitted)}")
        if not_found:
            msg_parts.append(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å: {', '.join(not_found)}")
        if msg_parts:
            await update.message.reply_text("\n".join(msg_parts))
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return await back_to_main_menu(update, context)
    else:
        # –°—Ç–∞—Ä—ã–π —Ä—É—á–Ω–æ–π —Ñ–ª–æ—É (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ submit_topic_students ...
        # (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        # ...
        # (–Ω–∏–∂–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å)
        usernames = [u.strip() for u in update.message.text.split(",")]
        topic = context.user_data["selected_topic_label"]
        field_name = TOPIC_FIELD_MAPPING.get(topic)
        now = datetime.now().date()
        found = []
        not_found = []
        already_submitted = []
        for username in usernames:
            student = session.query(Student).filter_by(telegram=username).first()
            if student:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –º–µ–Ω—Ç–æ—Ä—É
                if not (student.mentor_id == mentor.id or student.auto_mentor_id == mentor.id):
                    not_found.append(username + " (–Ω–µ –≤–∞—à —Å—Ç—É–¥–µ–Ω—Ç)")
                    continue
                progress = session.query(ManualProgress).filter_by(student_id=student.id).first()
                if progress and field_name and hasattr(progress, field_name):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç–µ–º–∞
                    current_date = getattr(progress, field_name)
                    if current_date:
                        existing_date = current_date.strftime("%d.%m.%Y") if hasattr(current_date, 'strftime') else str(current_date)
                        already_submitted.append(f"{username} (—Å–¥–∞–ª {existing_date})")
                        continue
                    setattr(progress, field_name, now)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
                    student.last_call_date = now
                    found.append(username)
                else:
                    not_found.append(username + " (–Ω–µ—Ç –ø–æ–ª—è)")
            else:
                not_found.append(username + " (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        session.commit()
        msg_parts = []
        if found:
            msg_parts.append(f"‚úÖ –î–∞—Ç–∞ —Å–¥–∞—á–∏ —Ç–µ–º—ã '{topic}' –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: {', '.join(found)}")
        if already_submitted:
            msg_parts.append(f"‚ÑπÔ∏è –£–∂–µ —Å–¥–∞–ª–∏ —Ç–µ–º—É '{topic}': {', '.join(already_submitted)}")
        if not_found:
            msg_parts.append(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å: {', '.join(not_found)}")
        if msg_parts:
            await update.message.reply_text("\n".join(msg_parts))
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return await back_to_main_menu(update, context)
