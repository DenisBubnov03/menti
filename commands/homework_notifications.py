from datetime import datetime, timedelta
from telegram import Bot
from data_base.db import session
from data_base.models import Homework, Student, Mentor
import asyncio
import logging
from dotenv import load_dotenv
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_unreviewed_homework(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        week_ago = datetime.now() - timedelta(days=7)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
        unreviewed_homework = session.query(Homework).filter(
            Homework.status == "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            Homework.created_at < week_ago
        ).all()
        
        if not unreviewed_homework:
            logger.info("–ù–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ–Ω—Ç–æ—Ä–∞–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        mentor_notifications = {}
        director_notifications = []
        
        for hw in unreviewed_homework:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
            student = session.query(Student).filter_by(id=hw.student_id).first()
            if not student:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—Ç–æ—Ä–∞
            mentor = None
            if hw.mentor_id:
                mentor = session.query(Mentor).filter_by(id=hw.mentor_id).first()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            hw_info = f"üìö –î–ó #{hw.id}: {student.fio} - {hw.module}, {hw.topic}, –º–µ–Ω—Ç–æ—Ä {mentor.telegram}\n"
            hw_info += f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {hw.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            hw_info += f"‚è∞ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {(datetime.now() - hw.created_at).days} –¥–Ω–µ–π\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞
            if mentor and mentor.chat_id:
                if mentor.id not in mentor_notifications:
                    mentor_notifications[mentor.id] = {
                        'mentor': mentor,
                        'homeworks': []
                    }
                mentor_notifications[mentor.id]['homeworks'].append(hw_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            director_notifications.append(hw_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞–º
        for mentor_id, data in mentor_notifications.items():
            mentor = data['mentor']
            homeworks = data['homeworks']
            
            message = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏:\n\n"
            message += "".join(homeworks)
            message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
            
            try:
                await bot.send_message(
                    chat_id=mentor.chat_id,
                    text=message
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—Ç–æ—Ä—É {mentor.full_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä—É {mentor.full_name}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É (ID=1)
        if director_notifications:
            director = session.query(Mentor).filter_by(id=1).first()
            if director and director.chat_id:
                message = f"üö® –í–ù–ò–ú–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–£! –ï—Å—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏:\n\n"
                message += "".join(director_notifications)
                message += f"\n–í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –î–ó: {len(director_notifications)}"
                
                try:
                    await bot.send_message(
                        chat_id=director.chat_id,
                        text=message
                    )
                    logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É: {e}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(unreviewed_homework)} –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –î–ó")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")




async def manual_check_notifications(bot: Bot):
    """
    –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    await check_unreviewed_homework(bot)
    return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if __name__ == "__main__":
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
    else:
        asyncio.run(check_unreviewed_homework(Bot(token=TELEGRAM_TOKEN)))
