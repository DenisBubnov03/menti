import asyncio
from googleapiclient.discovery import build
from google.oauth2 import service_account
import datetime
import re

from telegram import Bot, ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes

from commands.base_function import back_to_main_menu
from commands.google_calendar import get_calendar_service
import os
from dotenv import load_dotenv

from data_base.db import session
from data_base.models import Mentor

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_IDS = {"mentor1@example.com": 123456789, "student1@example.com": 987654321}  # –°–≤—è–∑–∫–∞ email ‚Üí chat_id

def get_calls_for_mentor_from_calendar(calendar_id: str, mentor_telegram: str, max_results=10) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar, —Ñ–∏–ª—å—Ç—Ä—É—è –∏—Ö –ø–æ Telegram-–Ω–∏–∫—É –º–µ–Ω—Ç–æ—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.
    :param calendar_id: ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    :param mentor_telegram: Telegram-–Ω–∏–∫ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    :param max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞—Ç–æ–π, –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    SERVICE_ACCOUNT_FILE = "credentials.json"
    SCOPES = ["https://www.googleapis.com/auth/calendar"]

    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES
    )

    service = build("calendar", "v3", credentials=credentials)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    now = datetime.datetime.utcnow().isoformat() + "Z"

    # –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π
    events_result = service.events().list(
        calendarId=calendar_id,
        timeMin=now,
        maxResults=max_results,
        singleEvents=True,
        orderBy="startTime"
    ).execute()

    events = events_result.get("items", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞
    calls = []
    for event in events:
        description = event.get("description", "")
        if f"@{mentor_telegram}" in description:  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Telegram-–Ω–∏–∫—É –º–µ–Ω—Ç–æ—Ä–∞
            start_time = event["start"].get("dateTime", event["start"].get("date"))
            start_time = datetime.datetime.fromisoformat(start_time).strftime("%d.%m.%Y %H:%M")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            student_telegram_match = re.search(r"@(\w+)", description)
            student_telegram = f"@{student_telegram_match.group(1)}" if student_telegram_match else "–ù–µ —É–∫–∞–∑–∞–Ω"

            calls.append({
                "date_time": start_time,
                "student_telegram": student_telegram
            })

    return calls

async def show_mentor_calls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Google Calendar.
    """
    user_id = update.message.from_user.id
    mentor = session.query(Mentor).filter(Mentor.chat_id == str(user_id)).first()


    if not mentor:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    calendar_id = "12027ce1762cbd0cb206050a7e14f741d2845ea5b73984acb5ac71fca6166495@group.calendar.google.com"
    mentor_telegram = mentor.telegram.lstrip("@")  # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è –ø–æ–∏—Å–∫–∞

    calls = get_calls_for_mentor_from_calendar(calendar_id, mentor_telegram)

    if not calls:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–≤–æ–Ω–∫–∏:\n\n"
    for call in calls:
        message += (
            f"üìÖ {call['date_time']}\n"
            f"üë®‚Äçüéì {call['student_telegram']}\n\n"
        )

    await update.message.reply_text(message)
    return await back_to_main_menu(update, context)


async def check_upcoming_calls():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    bot = Bot(token=TELEGRAM_TOKEN)
    service = get_calendar_service()
    now = datetime.datetime.utcnow()
    time_min = (now + datetime.timedelta(minutes=14)).isoformat() + "Z"
    time_max = (now + datetime.timedelta(minutes=16)).isoformat() + "Z"

    events_result = service.events().list(
        calendarId="your_calendar_id@group.calendar.google.com",
        timeMin=time_min,
        timeMax=time_max,
        singleEvents=True,
        orderBy="startTime"
    ).execute()

    events = events_result.get("items", [])

    for event in events:
        summary = event.get("summary", "–°–æ–∑–≤–æ–Ω")
        description = event.get("description", "")
        attendees = event.get("attendees", [])

        message = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç {summary}\n\n{description}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É –∏ –º–µ–Ω—Ç–æ—Ä—É
        for attendee in attendees:
            email = attendee.get("email")
            chat_id = CHAT_IDS.get(email)
            if chat_id:
                await bot.send_message(chat_id=chat_id, text=message)

async def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await check_upcoming_calls()
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç