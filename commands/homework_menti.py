from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import MessageHandler, ConversationHandler
from data_base.db import session

from commands.states import HOMEWORK_MODULE, HOMEWORK_TOPIC, HOMEWORK_MENTOR, HOMEWORK_MESSAGE, HOMEWORK_SELECT_TYPE
from data_base.models import Homework
from data_base.operations import get_pending_homework, approve_homework, \
    get_student_by_fio_or_telegram, get_all_mentors, get_mentor_chat_id

MODULES_TOPICS = {
    "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.3", "–¢–µ–º–∞ 1.4"],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.2", "–¢–µ–º–∞ 2.3", "–¢–µ–º–∞ 2.4", "–¢–µ–º–∞ 2.5"],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2"],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.1", "–¢–µ–º–∞ 4.2", "–¢–µ–º–∞ 4.3"],
        "–ú–æ–¥—É–ª—å 5": ["–†–µ–∑—é–º–µ/–õ–µ–≥–µ–Ω–¥–∞"]
    },
    "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.1", "–¢–µ–º–∞ 1.2", "–¢–µ–º–∞ 1.3"],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.2", "–¢–µ–º–∞ 2.3", "–¢–µ–º–∞ 2.4", "–¢–µ–º–∞ 2.5", "–¢–µ–º–∞ 2.6", "–¢–µ–º–∞ 2.7", "–≠–∫–∑–∞–º–µ–Ω 2"],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2", "–¢–µ–º–∞ 3.3", "–¢–µ–º–∞ 3.4", "–¢–µ–º–∞ 3.5", "–¢–µ–º–∞ 3.6", "–≠–∫–∑–∞–º–µ–Ω 3"],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.1", "–¢–µ–º–∞ 4.2", "–¢–µ–º–∞ 4.3", "–¢–µ–º–∞ 4.4", "–¢–µ–º–∞ 4.5", "–≠–∫–∑–∞–º–µ–Ω 4"],
        "–ú–æ–¥—É–ª—å 5": ["–¢–µ–º–∞ 5.1", "–¢–µ–º–∞ 5.2", "–¢–µ–º–∞ 5.3", "–¢–µ–º–∞ 5.4", "–¢–µ–º–∞ 5.5", "–¢–µ–º–∞ 5.6", "–≠–∫–∑–∞–º–µ–Ω 5"]
    }
}



async def submit_homework(update: Update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    student_telegram = "@" + update.message.from_user.username
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    training_type = student.training_type  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print(f'–¢–∏–ø —Å—Ç—É–¥–µ–Ω—Ç–∞ {training_type}')
    if training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
        # –ï—Å–ª–∏ —Ñ—É–ª–ª—Å—Ç–µ–∫ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        keyboard = [
            [KeyboardButton("–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return HOMEWORK_SELECT_TYPE

    # –î–ª—è manual –∏ automation —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
    if training_type not in MODULES_TOPICS:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return ConversationHandler.END

    keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS[training_type].keys()]

    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return HOMEWORK_MODULE


async def select_stack_type(update: Update, context):
    """–§—É–ª–ª—Å—Ç–µ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: manual –∏–ª–∏ automation"""
    choice = update.message.text

    if "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in choice:
        context.user_data["training_type"] = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    elif "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in choice:
        context.user_data["training_type"] = "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ '–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' –∏–ª–∏ '–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'.")
        return HOMEWORK_SELECT_TYPE

    training_type = context.user_data["training_type"]
    keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS[training_type].keys()]

    await update.message.reply_text(
        f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ {choice}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return HOMEWORK_MODULE


async def choose_topic(update: Update, context):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–∑ –º–æ–¥—É–ª—è"""
    student_telegram = "@" + update.message.from_user.username
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return HOMEWORK_MODULE

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    training_type = context.user_data.get("training_type", student.training_type)

    if training_type not in MODULES_TOPICS:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return HOMEWORK_MODULE

    module = update.message.text
    context.user_data["module"] = module  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–æ–¥—É–ª—å

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –º–æ–¥—É–ª—å –í–ù–£–¢–†–ò training_type
    if module not in MODULES_TOPICS[training_type]:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return HOMEWORK_MODULE

    topics = MODULES_TOPICS[training_type][module]  # –¢–µ–ø–µ—Ä—å –º–æ–¥—É–ª–∏ –±–µ—Ä—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    keyboard = [[KeyboardButton(topic)] for topic in topics]

    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return HOMEWORK_TOPIC


async def choose_mentor(update: Update, context):
    """–í—ã–±–æ—Ä –º–µ–Ω—Ç–æ—Ä–∞"""
    context.user_data["topic"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–º—É
    mentors = get_all_mentors()  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤
    keyboard = [[KeyboardButton(m.telegram)] for m in mentors]

    await update.message.reply_text(
        "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return HOMEWORK_MENTOR

async def wait_for_homework(update: Update, context):
    """–ñ–¥—ë–º, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"""
    context.user_data["mentor"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ–Ω—Ç–æ—Ä–∞
    await update.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–∞–π–ª, —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç.–¥.):")
    return HOMEWORK_MESSAGE

async def save_and_forward_homework(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –µ—ë –º–µ–Ω—Ç–æ—Ä—É"""
    student_telegram = "@" + update.message.from_user.username
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    module = context.user_data["module"]
    topic = context.user_data["topic"]
    mentor = context.user_data["mentor"]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    new_homework = Homework(
        student_id=student.id,
        module=module,
        topic=topic,
        status="–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    session.add(new_homework)
    session.commit()

    # ID –¥–æ–º–∞—à–∫–∏
    homework_id = new_homework.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    mentor_chat_id = get_mentor_chat_id(mentor)

    message_text = (
        f"üìö *–£—á–µ–Ω–∏–∫ {student.fio} –ø—Ä–∏—Å–ª–∞–ª –¥–æ–º–∞—à–∫—É –ø–æ {module} / {topic}*\n"
        f"üè∑ ID: {homework_id}\n"
        f"‚úâ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–∞–º–∞ –¥–æ–º–∞—à–∫–∞:"
    )

    await context.bot.send_message(chat_id=mentor_chat_id, text=message_text, parse_mode="Markdown")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –º–µ–Ω—Ç–æ—Ä—É
    await context.bot.forward_message(
        chat_id=mentor_chat_id,
        from_chat_id=update.message.chat_id,
        message_id=update.message.message_id
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫")],
            [KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")],
            [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω—Ç–æ—Ä—É!", reply_markup=keyboard)
    return ConversationHandler.END

