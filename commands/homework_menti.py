from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import MessageHandler, ConversationHandler

from commands.base_function import back_to_main_menu
from data_base.db import session

from commands.states import HOMEWORK_MODULE, HOMEWORK_TOPIC, HOMEWORK_MENTOR, HOMEWORK_MESSAGE, HOMEWORK_SELECT_TYPE, \
    CALL_SCHEDULE
from data_base.models import Homework, Student, Mentor
from data_base.operations import get_pending_homework, approve_homework, \
    get_student_by_fio_or_telegram, get_all_mentors, get_mentor_chat_id, get_mentor_by_direction

MODULES_TOPICS = {
    "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.4", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2", "–¢–µ–º–∞ 3.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.5", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 5": ["–†–µ–∑—é–º–µ/–õ–µ–≥–µ–Ω–¥–∞", "–û—Ç–º–µ–Ω–∞"],

        "–û—Ç–º–µ–Ω–∞": []
    },
    "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.1", "–¢–µ–º–∞ 1.2", "–¢–µ–º–∞ 1.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.2", "–¢–µ–º–∞ 2.3", "–¢–µ–º–∞ 2.4", "–¢–µ–º–∞ 2.5", "–¢–µ–º–∞ 2.6", "–¢–µ–º–∞ 2.7", "–≠–∫–∑–∞–º–µ–Ω 2", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2", "–¢–µ–º–∞ 3.3", "–¢–µ–º–∞ 3.4", "–¢–µ–º–∞ 3.5", "–¢–µ–º–∞ 3.6", "–≠–∫–∑–∞–º–µ–Ω 3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.1", "–¢–µ–º–∞ 4.2", "–¢–µ–º–∞ 4.3", "–¢–µ–º–∞ 4.4", "–¢–µ–º–∞ 4.5", "–≠–∫–∑–∞–º–µ–Ω 4", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 5": ["–¢–µ–º–∞ 5.1", "–¢–µ–º–∞ 5.2", "–¢–µ–º–∞ 5.3", "–¢–µ–º–∞ 5.4", "–¢–µ–º–∞ 5.5", "–¢–µ–º–∞ 5.6", "–≠–∫–∑–∞–º–µ–Ω 5", '–û—Ç–º–µ–Ω–∞'],
        "–û—Ç–º–µ–Ω–∞": []
    }
}


async def submit_homework(update: Update, context):
    """–°—Ç—É–¥–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏"""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    context.user_data["student_id"] = student.id
    context.user_data["training_type"] = student.training_type  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –¥–∞—ë–º –µ–º—É –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
        keyboard = [
            [KeyboardButton("–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–¥–∞—ë—Ç–µ –¥–æ–º–∞—à–∫—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return HOMEWORK_SELECT_TYPE

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ —Ñ—É–ª–ª—Å—Ç–µ–∫, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è
    keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS[student.training_type].keys()]
    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return HOMEWORK_MODULE  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç—É–¥–µ–Ω—Ç –ù–ï –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ–º—ã!



async def select_stack_type(update: Update, context):
    """–§—É–ª–ª—Å—Ç–µ–∫-—Å—Ç—É–¥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏."""
    direction_choice = update.message.text.strip()

    if direction_choice.lower() == "–æ—Ç–º–µ–Ω–∞":
        await back_to_main_menu(update, context)
        return await back_to_main_menu(update, context)

    if direction_choice not in ["–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return HOMEWORK_SELECT_TYPE

    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await back_to_main_menu(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    context.user_data["training_type"] = direction_choice

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if direction_choice == "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        context.user_data["mentor_id"] = 1  # manual_mentor
        context.user_data["mentor_telegram"] = session.query(Mentor).get(1).telegram if session.query(Mentor).get(1) else None
    else:  # –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        context.user_data["mentor_id"] = getattr(student, 'auto_mentor_id', None)
        auto_mentor = session.query(Mentor).get(getattr(student, 'auto_mentor_id', None)) if getattr(student, 'auto_mentor_id', None) else None
        context.user_data["mentor_telegram"] = auto_mentor.telegram if auto_mentor else None

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
    keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS[direction_choice].keys()]
    await update.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_choice}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return HOMEWORK_MODULE



async def choose_topic(update: Update, context):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–∑ –º–æ–¥—É–ª—è"""
    module = update.message.text
    context.user_data["module"] = module  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–æ–¥—É–ª—å
    date_text = update.message.text.strip()
    if date_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await back_to_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return ConversationHandler.END
    training_type = context.user_data.get("training_type")  # ‚úÖ –ë–µ—Ä—ë–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if not training_type or module not in MODULES_TOPICS.get(training_type, {}):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return HOMEWORK_MODULE

    topics = MODULES_TOPICS[training_type][module]
    keyboard = [[KeyboardButton(topic)] for topic in topics]

    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return HOMEWORK_TOPIC  # ‚úÖ –ë–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!




async def choose_mentor(update: Update, context):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    date_text = update.message.text.strip()
    if date_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await back_to_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return await back_to_main_menu(update, context)
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return await back_to_main_menu(update, context)

    context.user_data["topic"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–º—É

    # ‚úÖ –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –ù–ï —Ñ—É–ª–ª—Å—Ç—ç–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞
    if student.training_type != "–§—É–ª–ª—Å—Ç–µ–∫":
        mentor_id = student.mentor_id  # –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –º–µ–Ω—Ç–æ—Ä
    else:
        # ‚úÖ –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –º–µ–Ω—Ç–æ—Ä–∞
        mentor_id = context.user_data.get("mentor_id")

    mentor = session.query(Mentor).filter(Mentor.id == mentor_id).first()

    if not mentor:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–∞—à –º–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await back_to_main_menu(update, context)

    context.user_data["mentor_id"] = mentor.id
    context.user_data["mentor_telegram"] = mentor.telegram

    await update.message.reply_text(f"‚úÖ –í–∞—à –º–µ–Ω—Ç–æ—Ä: {mentor.telegram}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")
    return HOMEWORK_MESSAGE




async def wait_for_homework(update: Update, context):
    """–ñ–¥—ë–º, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"""
    context.user_data["mentor"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ–Ω—Ç–æ—Ä–∞
    await update.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–∞–π–ª, —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç.–¥.):")
    return HOMEWORK_MESSAGE

async def save_and_forward_homework(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–º–∞—à–∫–∏"""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    mentor_id = context.user_data.get("mentor_id")
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ module –≤ context.user_data
    module = context.user_data.get("module")
    if not module:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥—É–ª—å.")
        return HOMEWORK_MODULE

    topic = context.user_data.get("topic")
    mentor_telegram = context.user_data.get("mentor_telegram")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    new_homework = Homework(
        student_id=student.id,
        mentor_id=mentor_id,
        module=module,
        topic=topic,
        status="–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    session.add(new_homework)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å—Ç–∞–≤–∏–º True –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è –¥–æ–º–∞—à–∫–∏
    from data_base.models import ManualProgress
    progress = session.query(ManualProgress).filter_by(student_id=student.id).first()
    PROGRESS_FIELD_MAPPING = {
        "–¢–µ–º–∞ 1.4": "m1_homework",
        "–¢–µ–º–∞ 2.1": "m2_1_homework",
        "–¢–µ–º–∞ 2.3": "m2_3_homework",
        "–¢–µ–º–∞ 3.1": "m3_1_homework",
        "–¢–µ–º–∞ 3.2": "m3_2_homework",
        "–¢–µ–º–∞ 3.3": "m3_3_homework",
        "–¢–µ–º–∞ 4.5": "m4_5_homework",
    }
    field_name = PROGRESS_FIELD_MAPPING.get(topic)
    if progress and field_name and hasattr(progress, field_name):
        setattr(progress, field_name, True)
        session.commit()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º chat_id –º–µ–Ω—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context.user_data
    mentor_chat_id = context.user_data.get("chat_id")
    # ID –¥–æ–º–∞—à–∫–∏
    homework_id = new_homework.id

    if not mentor_chat_id:
        mentor = session.query(Mentor).filter(Mentor.telegram == mentor_telegram).first()
        if mentor:
            mentor_chat_id = mentor.chat_id
            context.user_data["chat_id"] = mentor_chat_id  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `mentor_chat_id`

    if not mentor_chat_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω mentor_chat_id.")
        return ConversationHandler.END

    # üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
    await context.bot.send_message(
        chat_id=mentor_chat_id,
        text=(
            f"üìö –£—á–µ–Ω–∏–∫ {student.fio} {student.telegram} –ø—Ä–∏—Å–ª–∞–ª –¥–æ–º–∞—à–∫—É –ø–æ {module} / {topic}\n"
            f"üìú ID: {homework_id}\n"
            "‚úâ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–∞–º–∞ –¥–æ–º–∞—à–∫–∞:"
        )
    )

    # ‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    await context.bot.forward_message(
        chat_id=mentor_chat_id,
        from_chat_id=update.message.chat_id,
        message_id=update.message.message_id
    )

    keyboard_buttons = [
        [KeyboardButton("üÜï –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É")],
        [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫")],
        [KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ")],
    ]
    if student.training_status and student.training_status.strip().lower() == "—É—Å—Ç—Ä–æ–∏–ª—Å—è":
        keyboard_buttons.append([KeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏")])
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )
    await update.message.reply_text("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω—Ç–æ—Ä—É!", reply_markup=keyboard)
    return ConversationHandler.END

