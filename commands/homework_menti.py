from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import MessageHandler, ConversationHandler

from commands.base_function import back_to_main_menu
from commands.rules_checker import check_rules_accepted
from data_base.db import session

from commands.states import HOMEWORK_MODULE, HOMEWORK_TOPIC, HOMEWORK_MENTOR, HOMEWORK_MESSAGE, \
    CALL_SCHEDULE
from data_base.models import Homework, Student, Mentor
from data_base.operations import get_pending_homework, approve_homework, \
    get_student_by_fio_or_telegram, get_all_mentors, get_mentor_chat_id, get_mentor_by_direction

# –ò–º–ø–æ—Ä—Ç –¥–ª—è AI –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º—ã 4.5
import asyncio
from commands.ai_check_45 import review_45_async, AICheckRepository, extract_text


async def get_submission_payload(submission_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–∞—á–∏ –¥–ª—è AI –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    homework = session.query(Homework).filter_by(id=submission_id).first()
    if not homework:
        raise ValueError(f"–°–¥–∞—á–∞ {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    student = session.query(Student).filter_by(id=homework.student_id).first()
    mentor = session.query(Mentor).filter_by(id=homework.mentor_id).first()
    
    return {
        "submission_id": submission_id,
        "student_id": homework.student_id,
        "student_username": student.telegram if student else None,
        "mentor_id": homework.mentor_id,
        "topic": homework.topic,
        "module": homework.module,
        "filename": "homework.txt",  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        "file_bytes": b"",  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    }


async def notify_student(student_id: int, message: str, bot=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    student = session.query(Student).filter_by(id=student_id).first()
    if not student:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not student.chat_id:
        import logging
        logger = logging.getLogger(__name__)
        logger.warning(f"–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id} ({student.telegram}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    if not bot:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}")
        return
    
    try:
        await bot.send_message(chat_id=student.chat_id, text=message)
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É {student_id} ({student.telegram})")
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id} ({student.telegram}): {e}")


async def notify_mentor(mentor_id: int, message: str, bot=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É"""
    mentor = session.query(Mentor).filter_by(id=mentor_id).first()
    if not mentor:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–ú–µ–Ω—Ç–æ—Ä —Å ID {mentor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not mentor.chat_id:
        import logging
        logger = logging.getLogger(__name__)
        logger.warning(f"–£ –º–µ–Ω—Ç–æ—Ä–∞ {mentor_id} ({mentor.telegram}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    if not bot:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä—É {mentor_id}")
        return
    
    try:
        await bot.send_message(chat_id=mentor.chat_id, text=message)
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—Ç–æ—Ä—É {mentor_id} ({mentor.telegram})")
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä—É {mentor_id} ({mentor.telegram}): {e}")


async def get_file_from_message(update: Update, context) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    message = update.message
    
    if message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç
        file = await context.bot.get_file(message.document.file_id)
        file_bytes = await file.download_as_bytearray()
        filename = message.document.file_name or "document"
        return filename, bytes(file_bytes)
    
    elif message.photo:
        # –§–æ—Ç–æ
        file = await context.bot.get_file(message.photo[-1].file_id)
        file_bytes = await file.download_as_bytearray()
        filename = "photo.jpg"
        return filename, bytes(file_bytes)
    
    elif message.text:
        # –¢–µ–∫—Å—Ç
        text_content = message.text.encode('utf-8')
        filename = "text.txt"
        return filename, text_content
    
    elif message.voice:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file = await context.bot.get_file(message.voice.file_id)
        file_bytes = await file.download_as_bytearray()
        filename = "voice.ogg"
        return filename, bytes(file_bytes)
    
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")


MODULES_TOPICS = {
    "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.4", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2", "–¢–µ–º–∞ 3.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.5", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 5": ["–†–µ–∑—é–º–µ/–õ–µ–≥–µ–Ω–¥–∞", "–û—Ç–º–µ–Ω–∞"],

        "–û—Ç–º–µ–Ω–∞": []
    },
    "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–ú–æ–¥—É–ª—å 1": ["–¢–µ–º–∞ 1.1", "–¢–µ–º–∞ 1.2", "–¢–µ–º–∞ 1.3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 2": ["–¢–µ–º–∞ 2.1", "–¢–µ–º–∞ 2.2", "–¢–µ–º–∞ 2.3", "–¢–µ–º–∞ 2.4", "–¢–µ–º–∞ 2.5", "–¢–µ–º–∞ 2.6", "–¢–µ–º–∞ 2.7", "–≠–∫–∑–∞–º–µ–Ω 2", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 3": ["–¢–µ–º–∞ 3.1", "–¢–µ–º–∞ 3.2", "–¢–µ–º–∞ 3.3", "–¢–µ–º–∞ 3.4", "–¢–µ–º–∞ 3.5", "–¢–µ–º–∞ 3.6", "–≠–∫–∑–∞–º–µ–Ω 3", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 4": ["–¢–µ–º–∞ 4.1", "–¢–µ–º–∞ 4.2", "–¢–µ–º–∞ 4.3", "–¢–µ–º–∞ 4.4", "–¢–µ–º–∞ 4.5", "–≠–∫–∑–∞–º–µ–Ω 4", '–û—Ç–º–µ–Ω–∞'],
        "–ú–æ–¥—É–ª—å 5": ["–¢–µ–º–∞ 5.1", "–¢–µ–º–∞ 5.2", "–¢–µ–º–∞ 5.3", "–¢–µ–º–∞ 5.4", "–¢–µ–º–∞ 5.5", "–¢–µ–º–∞ 5.6", "–≠–∫–∑–∞–º–µ–Ω 5", '–û—Ç–º–µ–Ω–∞'],
        "–û—Ç–º–µ–Ω–∞": []
    }
}


@check_rules_accepted
async def submit_homework(update: Update, context):
    """–°—Ç—É–¥–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏"""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    context.user_data["student_id"] = student.id
    context.user_data["training_type"] = student.training_type  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    if student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" –¥–ª—è —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤
        context.user_data["training_type"] = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º mentor_id —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data["mentor_id"] = student.mentor_id
        mentor = session.query(Mentor).get(student.mentor_id) if student.mentor_id else None
        context.user_data["mentor_telegram"] = mentor.telegram if mentor else None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS["–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"].keys()]
        await update.message.reply_text(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å (—Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return HOMEWORK_MODULE

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ —Ñ—É–ª–ª—Å—Ç–µ–∫, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è
    keyboard = [[KeyboardButton(mod)] for mod in MODULES_TOPICS[student.training_type].keys()]
    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return HOMEWORK_MODULE  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç—É–¥–µ–Ω—Ç –ù–ï –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ–º—ã!







async def choose_topic(update: Update, context):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–∑ –º–æ–¥—É–ª—è"""
    module = update.message.text
    context.user_data["module"] = module  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–æ–¥—É–ª—å
    date_text = update.message.text.strip()
    if date_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await back_to_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return ConversationHandler.END
    
    training_type = context.user_data.get("training_type")  # ‚úÖ –ë–µ—Ä—ë–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if not training_type or module not in MODULES_TOPICS.get(training_type, {}):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return HOMEWORK_MODULE

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
    available_modules = get_available_topics(student.id, training_type)
    available_topics = available_modules.get(module, [])
    
    if not available_topics:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Å–¥–∞—á–∏.")
        return HOMEWORK_MODULE

    keyboard = [[KeyboardButton(topic)] for topic in available_topics]

    await update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return HOMEWORK_TOPIC




async def choose_mentor(update: Update, context):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    date_text = update.message.text.strip()
    if date_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await back_to_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return await back_to_main_menu(update, context)
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return await back_to_main_menu(update, context)

    context.user_data["topic"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–º—É

    # ‚úÖ –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –ù–ï —Ñ—É–ª–ª—Å—Ç—ç–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞
    if student.training_type != "–§—É–ª–ª—Å—Ç–µ–∫":
        mentor_id = student.mentor_id  # –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –º–µ–Ω—Ç–æ—Ä
    else:
        # ‚úÖ –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –§—É–ª–ª—Å—Ç–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –º–µ–Ω—Ç–æ—Ä–∞
        mentor_id = context.user_data.get("mentor_id")

    mentor = session.query(Mentor).filter(Mentor.id == mentor_id).first()

    if not mentor:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–∞—à –º–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await back_to_main_menu(update, context)

    context.user_data["mentor_id"] = mentor.id
    context.user_data["mentor_telegram"] = mentor.telegram

    await update.message.reply_text(f"‚úÖ –í–∞—à –º–µ–Ω—Ç–æ—Ä: {mentor.telegram}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")
    return HOMEWORK_MESSAGE




async def wait_for_homework(update: Update, context):
    """–ñ–¥—ë–º, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"""
    context.user_data["mentor"] = update.message.text  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ–Ω—Ç–æ—Ä–∞
    await update.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–∞–π–ª, —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç.–¥.):")
    return HOMEWORK_MESSAGE

async def save_and_forward_homework(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–º–∞—à–∫–∏"""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    mentor_id = context.user_data.get("mentor_id")
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ module –≤ context.user_data
    module = context.user_data.get("module")
    if not module:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥—É–ª—å.")
        return HOMEWORK_MODULE

    topic = context.user_data.get("topic")
    mentor_telegram = context.user_data.get("mentor_telegram")
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    from data_base.models import Homework
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    new_homework = Homework(
        student_id=student.id,
        mentor_id=mentor_id,
        module=module,
        topic=topic,
        status="–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    session.add(new_homework)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å—Ç–∞–≤–∏–º True –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è –¥–æ–º–∞—à–∫–∏
    from data_base.models import ManualProgress
    progress = session.query(ManualProgress).filter_by(student_id=student.id).first()
    PROGRESS_FIELD_MAPPING = {
        "–¢–µ–º–∞ 1.4": "m1_homework",
        "–¢–µ–º–∞ 2.1": "m2_1_homework",
        "–¢–µ–º–∞ 2.3": "m2_3_homework",
        "–¢–µ–º–∞ 3.1": "m3_1_homework",
        "–¢–µ–º–∞ 3.2": "m3_2_homework",
        "–¢–µ–º–∞ 3.3": "m3_3_homework",
        "–¢–µ–º–∞ 4.5": "m4_5_homework",
    }
    field_name = PROGRESS_FIELD_MAPPING.get(topic)
    if progress and field_name and hasattr(progress, field_name):
        setattr(progress, field_name, True)
        session.commit()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º chat_id –º–µ–Ω—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context.user_data
    mentor_chat_id = context.user_data.get("chat_id")
    # ID –¥–æ–º–∞—à–∫–∏
    homework_id = new_homework.id

    if not mentor_chat_id:
        mentor = session.query(Mentor).filter(Mentor.telegram == mentor_telegram).first()
        if mentor:
            mentor_chat_id = mentor.chat_id
            context.user_data["chat_id"] = mentor_chat_id  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `mentor_chat_id`

    if not mentor_chat_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω mentor_chat_id.")
        return ConversationHandler.END

    # üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
    mentor_text = f"üìö –£—á–µ–Ω–∏–∫ {student.fio} {student.telegram} –ø—Ä–∏—Å–ª–∞–ª –¥–æ–º–∞—à–∫—É –ø–æ {module} / {topic}\n"
    mentor_text += f"üìú ID: {homework_id}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã 4.5 –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫
    if topic == "–¢–µ–º–∞ 4.5":
        from data_base.db import get_session
        with get_session() as db_session:
            from commands.ai_check_45 import TopicAttemptsRepository
            attempts_repo = TopicAttemptsRepository(db_session)
            attempts_info = attempts_repo.get_attempts(student.id, "–¢–µ–º–∞ 4.5")
            if attempts_info["attempts_count"] >= 2:
                mentor_text += "‚ö†Ô∏è –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
    
    mentor_text += "‚úâ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–∞–º–∞ –¥–æ–º–∞—à–∫–∞:"
    
    await context.bot.send_message(
        chat_id=mentor_chat_id,
        text=mentor_text
    )

    # ‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    await context.bot.forward_message(
        chat_id=mentor_chat_id,
        from_chat_id=update.message.chat_id,
        message_id=update.message.message_id
    )

    keyboard_buttons = [
        [KeyboardButton("üÜï –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É")],
        [KeyboardButton("üêõ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏")],
        [KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")],
        [KeyboardButton("üìú –ú–æ–∏ —Ç–µ–º—ã –∏ —Å—Å—ã–ª–∫–∏")],
        #[KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã 4.5 –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º
    if topic == "–¢–µ–º–∞ 4.5":
        await update.message.reply_text("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=keyboard)
    else:
        await update.message.reply_text("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω—Ç–æ—Ä—É!", reply_markup=keyboard)
    
    # üîÑ –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã 4.5
    if topic == "–¢–µ–º–∞ 4.5":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            from data_base.db import get_session
            from commands.ai_check_45 import TopicAttemptsRepository
            
            with get_session() as db_session:
                attempts_repo = TopicAttemptsRepository(db_session)
                attempts_info = attempts_repo.get_attempts(student.id, "–¢–µ–º–∞ 4.5")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É
            current_attempt = attempts_info["attempts_count"]
            
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"–¢–µ–º–∞ 4.5: –ø–æ–ø—ã—Ç–æ–∫ {current_attempt}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {attempts_info['is_completed']}")
            
            if attempts_info["is_completed"]:
                await update.message.reply_text(
                    "üéâ –¢–µ–º–∞ 4.5 —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
                    reply_markup=keyboard
                )
                return ConversationHandler.END
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ç–µ–º—ã 4.5
            # –õ–æ–≥–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ review_45_async
            logger.info(f"–¢–µ–º–∞ 4.5: {current_attempt} –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            filename, file_bytes = await get_file_from_message(update, context)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–¥–∞—á–∏ —Å —Ñ–∞–π–ª–æ–º
            async def get_submission_with_file(submission_id: int) -> dict:
                payload = await get_submission_payload(submission_id)
                payload["filename"] = filename
                payload["file_bytes"] = file_bytes
                return payload
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ—Ç–æ–º
            async def notify_student_with_bot(student_id: int, message: str):
                await notify_student(student_id, message, context.bot)
            
            async def notify_mentor_with_bot(mentor_id: int, message: str):
                await notify_mentor(mentor_id, message, context.bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏
            asyncio.create_task(
                review_45_async(
                    submission_id=homework_id,
                    extract_text_fn=extract_text,
                    get_submission_payload=get_submission_with_file,
                    repo=None,  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ review_45_async
                    notify_student=notify_student_with_bot,
                    notify_mentor=notify_mentor_with_bot
                )
            )
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ 4.5 –¥–ª—è —Å–¥–∞—á–∏ {homework_id}")
            
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏ 4.5 –¥–ª—è —Å–¥–∞—á–∏ {homework_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏
    
    return ConversationHandler.END


def get_available_topics(student_id: int, training_type: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    from data_base.db import get_session
    from commands.ai_check_45 import TopicAttemptsRepository
    
    with get_session() as db_session:
        attempts_repo = TopicAttemptsRepository(db_session)
        available_modules = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        all_topics = MODULES_TOPICS.get(training_type, {})
        
        for module, topics in all_topics.items():
            if module == "–û—Ç–º–µ–Ω–∞":
                continue
                
            available_topics = []
            for topic in topics:
                if topic == "–û—Ç–º–µ–Ω–∞":
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–º—ã 4.5
                if topic == "–¢–µ–º–∞ 4.5":
                    attempts_info = attempts_repo.get_attempts(student_id, "–¢–µ–º–∞ 4.5")
                    # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–º—É 4.5 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Ü–µ–Ω–∫–∞ >= 50)
                    # –¢–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –≤–∫–ª—é—á–∞—è 2-—é
                    if not attempts_info["is_completed"]:
                        available_topics.append(topic)
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
                    available_topics.append(topic)
            
            if available_topics:
                available_modules[module] = available_topics
        
        return available_modules

