from datetime import datetime

from commands.homework_mentor import *
from data_base.models import Mentor, ManualProgress
from data_base.operations import is_mentor, get_student_by_fio_or_telegram, is_admin
from telegram import  ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import ContextTypes
from data_base.db import session
from data_base.models import Student, ManualProgress, AutoProgress
from commands.get_new_topic import MANUAL_MODULE_2_LINKS, MANUAL_MODULE_3_LINKS, MANUAL_MODULE_4_LINKS, \
    AUTO_MODULE_LINKS, MANUAL_MODULE_1_LINK
from utils.request_logger import log_request


@log_request("start_command")
async def start_command(update, context):
    message = update.message
    username = str(message.from_user.username)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"=== START COMMAND ===")
    logger.info(f"Chat ID: {message.chat_id}")
    logger.info(f"Original username: {message.from_user.username}")
    logger.info(f"User ID: {message.from_user.id}")
    logger.info(f"Full name: {message.from_user.full_name}")

    # –î–æ–±–∞–≤–ª—è–µ–º @, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not username.startswith("@"):
        username = "@" + username  # ‚Üê –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º username
    
    logger.info(f"Final username: {username}")
    chat_id = message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id

    logger.info(f"Checking if user is admin...")
    if is_admin(username):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
        logger.info(f"User is ADMIN")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üí∞ –ü–ª–∞—Ç–µ–∂–∏")],
                [KeyboardButton("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
                [KeyboardButton("üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–∞—á–∏ —Ç–µ–º—ã")],
                [KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å")],
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞")],
                [KeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
                [KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞")],
                [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏")]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    logger.info(f"Checking if user is mentor...")
    if is_mentor(username):
        logger.info(f"User is MENTOR")
        mentor = session.query(Mentor).filter(Mentor.telegram == username).first()
        if mentor:
            if not mentor.chat_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
                from data_base.db import get_session, close_session
                update_session = get_session()
                try:
                    mentor_update = update_session.query(Mentor).filter(Mentor.id == mentor.id).first()
                    if mentor_update:
                        mentor_update.chat_id = chat_id
                        update_session.commit()
                        logger.info(f"Updated chat_id for mentor {mentor.id}")
                except Exception as e:
                    logger.error(f"Error updating mentor chat_id: {e}")
                    update_session.rollback()
                finally:
                    close_session()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
                [KeyboardButton("üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–∞—á–∏ —Ç–µ–º—ã")],
                [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏")],
                [KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å")],
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏ —ç—Ç–æ
    logger.info(f"Checking if user is student...")
    logger.info(f"Searching for student with username: {username}")
    student = get_student_by_fio_or_telegram(username)
    logger.info(f"Student found: {student is not None}")
    if student:
        logger.info(f"Student details: ID={student.id}, FIO={student.fio}, Telegram={student.telegram}")
        if not student.chat_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
            from data_base.db import get_session, close_session
            update_session = get_session()
            try:
                student_update = update_session.query(Student).filter(Student.id == student.id).first()
                if student_update:
                    student_update.chat_id = chat_id
                    update_session.commit()
                    logger.info(f"Updated chat_id for student {student.id}")
            except Exception as e:
                logger.error(f"Error updating chat_id: {e}")
                update_session.rollback()
            finally:
                close_session()
            # ‚úÖ –•–∞—Ä–¥–∫–æ–¥ –º–µ–Ω—Ç–æ—Ä–æ–≤

        manual_mentor = session.query(Mentor).get(1)  # –ú–µ–Ω—Ç–æ—Ä –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        mentor = session.query(Mentor).get(student.mentor_id) if student.mentor_id else None
        auto_mentor = session.query(Mentor).get(getattr(student, 'auto_mentor_id', None)) if getattr(student, 'auto_mentor_id', None) else None

        training_type = student.training_type.strip().lower() if student.training_type else ""
        mentor_info = ""

        if training_type == "—Ñ—É–ª–ª—Å—Ç–µ–∫":
            mentor_info = "\nüë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä—ã –¥–ª—è –≤–∞—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n"
            mentor_info += f"üíº –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {manual_mentor.full_name if manual_mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} {manual_mentor.telegram if manual_mentor else ''}\n"
            mentor_info += f"üíª –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {auto_mentor.full_name if auto_mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} {auto_mentor.telegram if auto_mentor else ''}"
        elif training_type == "—Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            mentor_info = f"\nüë®‚Äçüè´ –í–∞—à –º–µ–Ω—Ç–æ—Ä –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} {mentor.telegram if mentor else ''}"
        elif training_type == "–∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            mentor_info = f"\nüë®‚Äçüè´ –í–∞—à –º–µ–Ω—Ç–æ—Ä –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {auto_mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} {auto_mentor.telegram if mentor else ''}"
        else:
            mentor_info = "\n‚ö† –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è."

        keyboard_buttons = [
            [KeyboardButton("üÜï –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É")],
            [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫")],
            [KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")],
            [KeyboardButton("üìú –ú–æ–∏ —Ç–µ–º—ã –∏ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ")],
        ]

        # üîç –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É—Å—Ç—Ä–æ–∏–ª—Å—è
        if student.training_status.strip().lower() == "—É—Å—Ç—Ä–æ–∏–ª—Å—è":
            keyboard_buttons.append([KeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏")])

        keyboard = ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        max_retries = 3
        retry_delay = 1.0
        
        for attempt in range(max_retries):
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"DEBUG: student={student}, type={type(student)}")
                logger.info(f"DEBUG: student.fio={getattr(student, 'fio', None)}, type={type(getattr(student, 'fio', None))}")

                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ student ‚Äî –∫–æ—Ä—Ç–µ–∂, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                if isinstance(student, tuple):
                    fio_value = student[0]
                elif hasattr(student, 'fio'):
                    fio_value = student.fio
                else:
                    fio_value = str(student)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Ç–æ—á–∫–∞
                if not fio_value or fio_value.strip() in [".", ""]:
                    fio_value = "–°—Ç—É–¥–µ–Ω—Ç"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                else:
                    fio_value = fio_value.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                await update.message.reply_text(f"üîπ –ü—Ä–∏–≤–µ—Ç, {fio_value}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫.{mentor_info}",
                                                reply_markup=keyboard)
                return
            except Exception as e:
                if attempt < max_retries - 1:
                    import asyncio
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay}—Å")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    try:
                        await update.message.reply_text("üîπ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    except Exception as final_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {final_error}")
                        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
                    return


@log_request("my_topics_and_links")
async def my_topics_and_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    student_telegram = f"@{update.message.from_user.username}"
    student = session.query(Student).filter_by(telegram=student_telegram).first()
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return
    msg = []
    # –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if student.training_type.lower().startswith("—Ä—É—á–Ω") or student.training_type.lower().startswith("—Ñ—É–ª–ª"):
        progress = session.query(ManualProgress).filter_by(student_id=student.id).first()
        if progress:
            msg.append("<b>–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>")
            # 1 –º–æ–¥—É–ª—å
            if progress.m1_start_date:
                msg.append(f"- –¢–µ–º–∞ 1: {MANUAL_MODULE_1_LINK}")
            # 2 –º–æ–¥—É–ª—å
            if progress.m2_1_start_date:
                msg.append(f"- –¢–µ–º–∞ 2.1: {MANUAL_MODULE_2_LINKS.get('–¢–µ–º–∞ 2.1', '-')}")
            if progress.m2_2_start_date:
                msg.append(f"- –¢–µ–º–∞ 2.2: {MANUAL_MODULE_2_LINKS.get('–¢–µ–º–∞ 2.2', '-')}")
            if progress.m2_3_start_date:
                msg.append(
                    f"- –¢–µ–º–∞ 2.3: {MANUAL_MODULE_2_LINKS.get('–¢–µ–º–∞ 2.3', '-')}\n"
                    f"- –¢–µ–º–∞ 2.4: https://thankful-candy-c57.notion.site/2-4-20594f774aab8197a077ef3921eaf641?source=copy_link"
                )
            # 3 –º–æ–¥—É–ª—å
            if progress.m3_1_start_date:
                msg.append(f"- –¢–µ–º–∞ 3.1: {MANUAL_MODULE_3_LINKS.get('–¢–µ–º–∞ 3.1', '-')}")
            if progress.m3_2_start_date:
                msg.append(f"- –¢–µ–º–∞ 3.2: {MANUAL_MODULE_3_LINKS.get('–¢–µ–º–∞ 3.2', '-')}")
            if progress.m3_3_start_date:
                msg.append(f"- –¢–µ–º–∞ 3.3: {MANUAL_MODULE_3_LINKS.get('–¢–µ–º–∞ 3.3', '-')}")
            # 4 –º–æ–¥—É–ª—å
            if progress.m4_1_start_date:
                msg.append(f"- –¢–µ–º–∞ 4.1: {MANUAL_MODULE_4_LINKS.get('–¢–µ–º–∞ 4.1', '-')}")
            if progress.m4_2_start_date:
                msg.append(f"- –¢–µ–º–∞ 4.2: {MANUAL_MODULE_4_LINKS.get('–¢–µ–º–∞ 4.2', '-')}")
            if progress.m4_3_start_date:
                msg.append(f"- –¢–µ–º–∞ 4.3: {MANUAL_MODULE_4_LINKS.get('–¢–µ–º–∞ 4.3', '-')}")
            # –î–æ–ø. —Ç–µ–º—ã 4 –º–æ–¥—É–ª—è
            if getattr(progress, 'm4_4_start_date', None):
                msg.append(f"- –¢–µ–º–∞ 4.4: {MANUAL_MODULE_4_LINKS.get('–¢–µ–º–∞ 4.4', '-')}")
            if getattr(progress, 'm4_5_start_date', None):
                msg.append(f"- –¢–µ–º–∞ 4.5: {MANUAL_MODULE_4_LINKS.get('–¢–µ–º–∞ 4.5', '-')}")
            if getattr(progress, 'm4_mock_exam_start_date', None):
                msg.append(f"- –ú–æ–∫ —ç–∫–∑–∞–º–µ–Ω: {MANUAL_MODULE_4_LINKS.get('–ú–æ–∫ —ç–∫–∑–∞–º–µ–Ω','-')}")
    # –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if student.training_type.lower().startswith("–∞–≤—Ç–æ") or student.training_type.lower().startswith("—Ñ—É–ª–ª"):
        progress = session.query(AutoProgress).filter_by(student_id=student.id).first()
        if progress:
            msg.append("\n<b>–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>")
            for i in range(1, 9):
                if getattr(progress, f"m{i}_start_date", None):
                    msg.append(f"- –ú–æ–¥—É–ª—å {i}: {AUTO_MODULE_LINKS.get(i,'-')}")
    if not msg:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º.")
    else:
        await update.message.reply_text("\n".join(msg), parse_mode="HTML")
