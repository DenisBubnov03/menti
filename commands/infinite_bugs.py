import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler, ContextTypes

from commands.base_function import back_to_main_menu
from commands.rules_checker import check_rules_accepted
from commands.states import INFINITE_BUGS_CHAPTER, INFINITE_BUGS_TASK, INFINITE_BUGS_LINK
from data_base.db import session
from data_base.models import Student
from utils.request_logger import log_request, log_conversation_handler

logger = logging.getLogger(__name__)

INFINITE_BUGS_TASKS = {
    "–ì–ª–∞–≤–∞ 1": {
        "–ó–∞–¥–∞–Ω–∏–µ 1": "https://thankful-candy-c57.notion.site/1-1-24694f774aab80c7a760c8136e542367?source=copy_link",
        "–ó–∞–¥–∞–Ω–∏–µ 2": "https://thankful-candy-c57.notion.site/1-2-24694f774aab80ab91a0df3a21abac30?source=copy_link",
        "–ó–∞–¥–∞–Ω–∏–µ 3": "https://thankful-candy-c57.notion.site/1-3-24694f774aab80679969c5725b2bc7f8?source=copy_link",
        "–ó–∞–¥–∞–Ω–∏–µ 4": "https://thankful-candy-c57.notion.site/1-4-24694f774aab80a2aebad23c1a5c0261?source=copy_link"
    },
    "–ì–ª–∞–≤–∞ 2": {
        "–ó–∞–¥–∞–Ω–∏–µ 1": "https://thankful-candy-c57.notion.site/2-1-24694f774aab803aa470d4c36b578e4c?source=copy_link",
        "–ó–∞–¥–∞–Ω–∏–µ 2": "https://thankful-candy-c57.notion.site/2-2-24694f774aab80b4a1fbcc8684d8a145?source=copy_link"
    }
}

@log_request("infinite_bugs_entry")
@check_rules_accepted
async def infinite_bugs_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏'"""
    user_id = update.message.from_user.id
    student_telegram = f"@{update.message.from_user.username}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
    student = session.query(Student).filter_by(telegram=student_telegram).first()
    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from data_base.models import ManualProgress, AutoProgress
    
    manual_progress = session.query(ManualProgress).filter_by(student_id=student.id).first()
    auto_progress = session.query(AutoProgress).filter_by(student_id=student.id).first()
    
    if not manual_progress and not auto_progress:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω—Ç–æ—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è!"
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
    has_required_module = False
    training_type = student.training_type.strip().lower() if student.training_type else ""
    
    if manual_progress:
        # –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º m5_start_date
        if manual_progress.m5_start_date:
            has_required_module = True
    
    if auto_progress:
        # –î–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º m8_start_date
        if auto_progress.m8_start_date:
            has_required_module = True
    
    if not has_required_module:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        if "—Ñ—É–ª–ª—Å—Ç–µ–∫" in training_type:
            message = (
                "‚ùå –§—É–Ω–∫—Ü–∏—è '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 5 –º–æ–¥—É–ª—è –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é "
                "–ò–õ–ò 8 –º–æ–¥—É–ª—è –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        elif "—Ä—É—á–Ω" in training_type:
            message = (
                "‚ùå –§—É–Ω–∫—Ü–∏—è '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 5 –º–æ–¥—É–ª—è!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ 5 –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        elif "–∞–≤—Ç–æ" in training_type:
            message = (
                "‚ùå –§—É–Ω–∫—Ü–∏—è '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 8 –º–æ–¥—É–ª—è!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ 8 –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        else:
            message = (
                "‚ùå –§—É–Ω–∫—Ü–∏—è '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 5 –º–æ–¥—É–ª—è –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é "
                "–ò–õ–ò 8 –º–æ–¥—É–ª—è –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        
        await update.message.reply_text(message)
        return ConversationHandler.END

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–ì–ª–∞–≤–∞ 1")], [KeyboardButton("–ì–ª–∞–≤–∞ 2")], [KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    
    await update.message.reply_text(
        "üêõ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–≥–∏:",
        reply_markup=keyboard
    )
    
    return INFINITE_BUGS_CHAPTER


@log_conversation_handler("select_chapter")
async def select_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤—ã"""
    user_input = update.message.text.strip()
    
    if user_input == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await back_to_main_menu(update, context)
    
    if user_input not in INFINITE_BUGS_TASKS:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return INFINITE_BUGS_CHAPTER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–ª–∞–≤—É
    context.user_data["selected_chapter"] = user_input
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã
    tasks = list(INFINITE_BUGS_TASKS[user_input].keys())
    keyboard_buttons = [[KeyboardButton(task)] for task in tasks]
    keyboard_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–∞–º")])
    
    keyboard = ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üìñ {user_input}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=keyboard
    )
    
    return INFINITE_BUGS_TASK


@log_conversation_handler("select_task")
async def select_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
    user_input = update.message.text.strip()
    
    if user_input == "üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–∞–º":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–ª–∞–≤—ã
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("–ì–ª–∞–≤–∞ 1")], [KeyboardButton("–ì–ª–∞–≤–∞ 2")], [KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "üêõ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –±–∞–≥–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–≥–∏:",
            reply_markup=keyboard
        )
        return INFINITE_BUGS_CHAPTER
    
    selected_chapter = context.user_data.get("selected_chapter")
    if not selected_chapter or user_input not in INFINITE_BUGS_TASKS[selected_chapter]:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return INFINITE_BUGS_TASK
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    context.user_data["selected_task"] = user_input
    
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º")]],
        resize_keyboard=True
    )
    
    await update.message.reply_text(
        f"üìù {selected_chapter} - {user_input}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç:",
        reply_markup=keyboard
    )
    
    return INFINITE_BUGS_LINK


@log_conversation_handler("process_bug_report")
async def process_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç–∞"""
    user_input = update.message.text.strip()
    
    if user_input == "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞–Ω–∏—è
        selected_chapter = context.user_data.get("selected_chapter")
        tasks = list(INFINITE_BUGS_TASKS[selected_chapter].keys())
        keyboard_buttons = [[KeyboardButton(task)] for task in tasks]
        keyboard_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–∞–º")])
        
        keyboard = ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üìñ {selected_chapter}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
            reply_markup=keyboard
        )
        return INFINITE_BUGS_TASK
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    if not (user_input.startswith('http') or user_input.startswith('https')):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç!"
        )
        return INFINITE_BUGS_LINK
    
    selected_chapter = context.user_data.get("selected_chapter")
    selected_task = context.user_data.get("selected_task")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
    check_link = INFINITE_BUGS_TASKS[selected_chapter][selected_task]
    
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç!\n\n"
        f"üìã {selected_chapter} - {selected_task}\n\n"
        f"üîç –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        f"{check_link}\n\n"
        f"–°—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—à–∏ –Ω–∞—Ö–æ–¥–∫–∏ —Å –Ω–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º –±–∞–≥–æ–≤!",
        parse_mode="HTML"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()
    
    return await back_to_main_menu(update, context) 