import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler, ContextTypes

from commands.base_function import back_to_main_menu
from commands.states import CURATOR_DIRECTION_SELECTION, CURATOR_CONFIRMATION
from data_base.db import session
from data_base.models import Student, Mentor
from data_base.operations import get_student_by_fio_or_telegram

logger = logging.getLogger(__name__)

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
NOTIFICATION_USER_ID = int(os.getenv('NOTIFICATION_BOT_USER_ID', '0'))


async def request_curator_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —Ñ—É–ª–ª—Å—Ç–µ–∫
    if not student.training_type or student.training_type.strip().lower() != "—Ñ—É–ª–ª—Å—Ç–µ–∫":
        await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '–§—É–ª–ª—Å—Ç–µ–∫'.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    manual_mentor = session.query(Mentor).get(student.mentor_id) if student.mentor_id else None
    auto_mentor = session.query(Mentor).get(student.auto_mentor_id) if student.auto_mentor_id else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∫—É—Ä–∞—Ç–æ—Ä
    if manual_mentor and auto_mentor:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä—ã –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º!")
        return ConversationHandler.END

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞
    message = (
        "üë®‚Äçüè´ –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–¥–∞—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons = []
    
    if not manual_mentor:
        keyboard_buttons.append([KeyboardButton("üíº –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")])
    
    if not auto_mentor:
        keyboard_buttons.append([KeyboardButton("üíª –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")])
    
    keyboard_buttons.append([KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    keyboard = ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)
    
    await update.message.reply_text(message, reply_markup=keyboard)
    return CURATOR_DIRECTION_SELECTION


async def select_curator_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    message_text = update.message.text
    
    if message_text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(update, context)
        return ConversationHandler.END
    
    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    
    if not student:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if message_text == "üíº –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        context.user_data["requested_direction"] = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        direction_name = "—Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    elif message_text == "üíª –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        context.user_data["requested_direction"] = "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        direction_name = "–∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
        return CURATOR_DIRECTION_SELECTION

    confirmation_message = (
        f"üìã –ó–∞–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ {direction_name}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞?"
    )

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
        [KeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

    await update.message.reply_text(confirmation_message, reply_markup=keyboard)
    return CURATOR_CONFIRMATION


async def confirm_curator_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    message_text = update.message.text
    
    if message_text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(update, context)
        return ConversationHandler.END
    
    if message_text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        await back_to_main_menu(update, context)
        return ConversationHandler.END
    
    if message_text != "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        return CURATOR_CONFIRMATION

    student_telegram = f"@{update.message.from_user.username}"
    student = get_student_by_fio_or_telegram(student_telegram)
    
    if not student:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ConversationHandler.END

    requested_direction = context.user_data.get("requested_direction")
    
    if not requested_direction:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!")
        return ConversationHandler.END

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –±–æ—Ç
        await send_curator_request_notification(context, student, requested_direction)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{requested_direction}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        logger.info(f"Curator request sent by student {student.telegram} for direction {requested_direction}")
        
    except Exception as e:
        logger.error(f"Error sending curator request notification: {e}")
        # –î–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{requested_direction}' –ø—Ä–∏–Ω—è—Ç!\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    await back_to_main_menu(update, context)
    return ConversationHandler.END


async def send_curator_request_notification(context: ContextTypes.DEFAULT_TYPE, student: Student, direction: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –¥—Ä—É–≥–æ–π –±–æ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv('NOTIFICATION_BOT_TOKEN')
        
        if not bot_token:
            logger.warning("NOTIFICATION_BOT_TOKEN not set, skipping notification")
            return
            
        if NOTIFICATION_USER_ID == 0:
            logger.warning("NOTIFICATION_BOT_USER_ID not set, skipping notification")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_message = (
            f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.fio}\n"
            f"üì± Telegram: {student.telegram}\n"
            f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API Telegram –∏—Å–ø–æ–ª—å–∑—É—è urllib
        import urllib.request
        import urllib.parse
        import json
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": NOTIFICATION_USER_ID,
            "text": notification_message,
            "parse_mode": "HTML"
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        json_data = json.dumps(data).encode('utf-8')
        req = urllib.request.Request(url, data=json_data, headers={'Content-Type': 'application/json'})
        
        with urllib.request.urlopen(req) as response:
            if response.getcode() == 200:
                logger.info(f"Curator request notification sent successfully to user {NOTIFICATION_USER_ID}")
            else:
                logger.error(f"Failed to send notification: {response.getcode()}")
                    
    except Exception as e:
        logger.error(f"Error in send_curator_request_notification: {e}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.warning("Notification failed, but continuing with the main process")


def check_curator_before_homework(student_telegram: str, training_type: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (has_curator, message)
    """
    student = get_student_by_fio_or_telegram(student_telegram)
    
    if not student:
        return False, "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    if training_type.lower() == "—Ñ—É–ª–ª—Å—Ç–µ–∫":
        # –î–ª—è —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        manual_mentor = session.query(Mentor).get(student.mentor_id) if student.mentor_id else None
        auto_mentor = session.query(Mentor).get(student.auto_mentor_id) if student.auto_mentor_id else None
        
        if not manual_mentor and not auto_mentor:
            return False, (
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫—É—Ä–∞—Ç–æ—Ä!\n"
                "–î–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë®‚Äçüè´ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
        elif not manual_mentor:
            return False, (
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n"
                "–î–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë®‚Äçüè´ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
        elif not auto_mentor:
            return False, (
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n"
                "–î–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë®‚Äçüè´ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
        
        return True, "‚úÖ –ö—É—Ä–∞—Ç–æ—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"
    
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä–∞—Ç–æ—Ä
        mentor = session.query(Mentor).get(student.mentor_id) if student.mentor_id else None
        
        if not mentor:
            return False, (
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä!\n"
                "–î–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        return True, "‚úÖ –ö—É—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω"
