from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ConversationHandler

from commands.base_function import back_to_main_menu
from commands.states import PAYMENT_WAITING, PAYMENT_CONFIRMATION
from data_base.db import session
from data_base.models import Student, Payment

from telegram import Update
from telegram.ext import ConversationHandler
from datetime import datetime
from decimal import Decimal
from data_base.models import Payment, Student
from data_base.db import session
from data_base.operations import get_mentor_by_student
from commands.states import PAYMENT_WAITING


async def request_payment(update: Update, context):
    """–°—Ç—É–¥–µ–Ω—Ç –Ω–∞–∂–∏–º–∞–µ—Ç '–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ'"""
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15000').",
        reply_markup=keyboard
    )
    return PAYMENT_WAITING


async def forward_payment(update: Update, context):
    student_telegram = f"@{update.message.from_user.username}"
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∏—Ç—å", "üîô –æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await update.message.reply_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await back_to_main_menu(update, context)

    file_id = None
    payment_text = None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if message.photo:
        file_id = message.photo[-1].file_id
        payment_text = message.caption
    elif message.document:
        file_id = message.document.file_id
        payment_text = message.caption
    elif message.text:
        payment_text = message.text.strip()

    if not payment_text or not payment_text.isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15000').")
        return PAYMENT_WAITING

    amount = float(payment_text)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –º–µ–Ω—Ç–æ—Ä–∞
    student = session.query(Student).filter(Student.telegram == student_telegram).first()
    mentor = get_mentor_by_student(student_telegram)

    if not student or not mentor:
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ mentor_id –¥–ª—è –∞–≤—Ç–æ –∏ —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤ ---
    mentor_id = student.mentor_id  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—á–Ω–æ–π
    if student.training_type in ["–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–§—É–ª–ª—Å—Ç–µ–∫"] and getattr(student, 'auto_mentor_id', None):
        mentor_id = student.auto_mentor_id
    # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

    total_paid = student.payment_amount or Decimal("0")
    total_cost = student.total_cost or Decimal("0")

    if total_paid + amount > total_cost:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è.\n"
            f"üí∞ –£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ: {total_paid} —Ä—É–±.\n"
            f"üìö –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: {total_cost} —Ä—É–±.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–µ –±–æ–ª—å—à–µ {total_cost - total_paid} —Ä—É–±.)"
        )
        return PAYMENT_WAITING

    comment = "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" if total_paid == 0 else "–î–æ–ø–ª–∞—Ç–∞"

    new_payment = Payment(
        student_id=student.id,
        mentor_id=mentor_id,
        amount=Decimal(str(amount)),
        payment_date=datetime.now().date(),
        comment=comment,
        status="–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    )
    session.add(new_payment)
    session.commit()

    # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    await update.message.reply_text("‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–Ω—Ç–æ—Ä—É.")

    # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞
    # mentor_chat_id = 1257163820  # üîí –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π ID
    mentor_chat_id = 325531224

    await context.bot.send_message(
        chat_id=mentor_chat_id,
        text=(
            f"üì© –£—á–µ–Ω–∏–∫ {student.telegram} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±.\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {new_payment.id}\n"
            f"–°—Ç–∞—Ç—É—Å: –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        )
    )

    if file_id:
        await context.bot.send_photo(
            chat_id=mentor.mentor_chat_id,
            photo=file_id,
            caption=f"üßæ –ß–µ–∫ –æ—Ç {student.telegram}"
        )

    return ConversationHandler.END

async def forward_commission_payment(update: Update, context):
    student_telegram = f"@{update.message.from_user.username}"
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∏—Ç—å", "üîô –æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await update.message.reply_text("‚ùå –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await back_to_main_menu(update, context)

    file_id = None
    payment_text = None

    if message.photo:
        file_id = message.photo[-1].file_id
        payment_text = message.caption
    elif message.document:
        file_id = message.document.file_id
        payment_text = message.caption
    elif message.text:
        payment_text = message.text.strip()

    if not payment_text or not payment_text.strip().isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15000').")
        return PAYMENT_WAITING

    amount = float(payment_text)

    remaining = context.user_data.get("commission_remaining")
    if amount > remaining:
        await update.message.reply_text(
            f"‚ùå –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {remaining:.2f} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:"
        )
        return PAYMENT_WAITING

    student = session.query(Student).filter(Student.telegram == student_telegram).first()
    mentor = get_mentor_by_student(student_telegram)

    if not student or not mentor:
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    mentor_id = student.mentor_id
    auto_mentor_id = getattr(student, 'auto_mentor_id', None)
    if student.training_type in ["–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–§—É–ª–ª—Å—Ç–µ–∫"] and auto_mentor_id:
        mentor_id = auto_mentor_id
    new_payment = Payment(
        student_id=student.id,
        mentor_id=mentor_id,
        amount=Decimal(str(amount)),
        payment_date=datetime.now().date(),
        comment="–ö–æ–º–∏—Å—Å–∏—è",
        status="–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    )
    session.add(new_payment)
    session.commit()

    await update.message.reply_text("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–Ω—Ç–æ—Ä—É.")
    mentor_chat_id = 325531224

    if not mentor_chat_id:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: —É –º–µ–Ω—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id.")
        return ConversationHandler.END

    await context.bot.send_message(
        chat_id=mentor_chat_id,
        text=(
            f"üì© –°—Ç—É–¥–µ–Ω—Ç {student_telegram} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã–ø–ª–∞—Ç—É –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±.\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {new_payment.id}\n"
            f"–°—Ç–∞—Ç—É—Å: –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        )
    )

    if file_id:
        if message.photo:
            await context.bot.send_photo(chat_id=mentor_chat_id, photo=file_id, caption=f"üßæ –ß–µ–∫ –æ—Ç {student.telegram}")
        elif message.document:
            await context.bot.send_document(chat_id=mentor_chat_id, document=file_id, caption=f"üßæ –ß–µ–∫ –æ—Ç {student.telegram}")
    else:
        await context.bot.send_message(chat_id=mentor_chat_id, text=f"‚ö†Ô∏è –ß–µ–∫ –Ω–µ –±—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º {student.telegram}.")

    return ConversationHandler.END


async def request_commission_payment(update: Update, context):
    """–°—Ç—É–¥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤—ã–ø–ª–∞—Ç—É –∫–æ–º–∏—Å—Å–∏–∏"""
    student_telegram = "@" + update.message.from_user.username
    student = session.query(Student).filter(Student.telegram == student_telegram).first()

    if not student:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç!")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
    training_status = student.training_status.strip().lower() if student.training_status else ""
    
    if training_status != "—É—Å—Ç—Ä–æ–∏–ª—Å—è":
        await update.message.reply_text(
            "‚ùå –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {student.training_status or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        )
        return ConversationHandler.END

    if not student.commission:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏–∏.")
        return ConversationHandler.END

    try:
        parts, percent = map(lambda x: x.strip().replace('%', ''), student.commission.split(","))
        total_parts = int(parts)
        percent = float(percent)

        total_commission = round((student.salary or 0) * (percent / 100) * total_parts, 2)
        already_paid = float(student.commission_paid or 0)
        remaining = round(total_commission - already_paid, 2)

        if remaining <= 0:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—é.")
            return ConversationHandler.END

        context.user_data["student_telegram"] = student_telegram
        context.user_data["commission_payment"] = True
        context.user_data["commission_remaining"] = remaining

        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            f"üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {total_commission} —Ä—É–±.\n"
            f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {already_paid} —Ä—É–±.\n"
            f"üìå –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {remaining} —Ä—É–±.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏ —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–∏:",
            reply_markup=keyboard
        )
        return PAYMENT_WAITING

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}")
        return ConversationHandler.END
