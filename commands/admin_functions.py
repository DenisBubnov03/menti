from telegram import Update

from commands.states import *
from data_base.db import session
from data_base.models import Mentor
from data_base.operations import get_all_students  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
from telegram.ext import ConversationHandler

from telegram.ext import ConversationHandler


async def add_mentor_request(update: Update, context):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞."""
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞:")
    return WAITING_MENTOR_NAME


async def save_mentor_name(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram username."""
    context.user_data["new_mentor_name"] = update.message.text  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    await update.message.reply_text("üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: @username):")
    return WAITING_MENTOR_TG


async def save_mentor_tg(update: Update, context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram username –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä–∞ –≤ –ë–î."""
    new_mentor_tg = update.message.text.strip()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ username —Å "@"
    if not new_mentor_tg.startswith("@"):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WAITING_MENTOR_TG

    new_mentor_name = context.user_data.get("new_mentor_name")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –≤ –ë–î
    existing_mentor = session.query(Mentor).filter(Mentor.telegram == new_mentor_tg).first()

    if existing_mentor:
        await update.message.reply_text(f"‚ö† –ú–µ–Ω—Ç–æ—Ä {new_mentor_tg} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –≤ –ë–î
    new_mentor = Mentor(telegram=new_mentor_tg, full_name=new_mentor_name, is_admin=False)
    session.add(new_mentor)
    session.commit()

    await update.message.reply_text(f"‚úÖ –ú–µ–Ω—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {new_mentor_name} - {new_mentor_tg}")
    return ConversationHandler.END


async def request_broadcast_message(update, context):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await update.message.reply_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
    return BROADCAST_WAITING

async def send_broadcast(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return BROADCAST_WAITING

    students = get_all_students()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

    sent_count = 0
    failed_count = 0

    for student in students:
        if student.chat_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ chat_id
            try:
                await context.bot.send_message(chat_id=student.chat_id, text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞:\n\n{text}")
                sent_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—É {student.telegram}: {e}")
                failed_count += 1

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º. –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}.")
    return ConversationHandler.END


from telegram.ext import ConversationHandler

WAITING_MENTOR_TG_REMOVE = range(1)  # –°–æ—Å—Ç–æ—è–Ω–∏–µ

async def remove_mentor_request(update: Update, context):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ username –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ Telegram username –º–µ–Ω—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–ø—Ä–∏–º–µ—Ä: @username):")
    return WAITING_MENTOR_TG_REMOVE

async def remove_mentor(update: Update, context):
    """–£–¥–∞–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –ø–æ –µ–≥–æ Telegram username."""
    mentor_tg = update.message.text.strip()

    if not mentor_tg.startswith("@"):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WAITING_MENTOR_TG_REMOVE

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ–Ω—Ç–æ—Ä –≤ –ë–î
    mentor = session.query(Mentor).filter(Mentor.telegram == mentor_tg).first()

    if not mentor:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: –ú–µ–Ω—Ç–æ—Ä {mentor_tg} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    # ‚úÖ –£–¥–∞–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä–∞
    session.delete(mentor)
    session.commit()

    await update.message.reply_text(f"‚úÖ –ú–µ–Ω—Ç–æ—Ä {mentor_tg} —É–¥–∞–ª—ë–Ω!")
    return ConversationHandler.END
