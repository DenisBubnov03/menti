from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from aiogram import Bot, Dispatcher, types
import os
from commands.base_function import back_to_main_menu
from commands.homework_menti import *
from commands.homework_mentor import *
from commands.payment_menti import request_payment, forward_payment
from commands.payment_mentor import confirm_payment, reject_payment, confirm_or_reject_payment
from commands.states import *
from data_base.models import Mentor
from data_base.operations import is_mentor, get_student_by_fio_or_telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import MessageHandler, ConversationHandler
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

async def start_command(update, context):
    message = update.message
    username = str(message.from_user.username)

    # –î–æ–±–∞–≤–ª—è–µ–º @, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not username.startswith("@"):
        username = "@" + username  # ‚Üê –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º username

    chat_id = message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if is_mentor(username):
        mentor = session.query(Mentor).filter(Mentor.telegram == username).first()
        if mentor:
            if not mentor.chat_id:
                mentor.chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
                session.commit()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
                [KeyboardButton("üéì–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏")],
                [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏")],
                [KeyboardButton("üìå–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–∞—á–∏ —Ç–µ–º—ã")],
                [KeyboardButton("‚úâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("üîπ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ú–ï–ù–¢–û–†. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏ —ç—Ç–æ
    student = get_student_by_fio_or_telegram(username)
    if student:
        if not student.chat_id:
            student.chat_id = chat_id
            session.commit()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫")],
                [KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")],
                [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text(f"üîπ –ü—Ä–∏–≤–µ—Ç, {student.fio}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –°–¢–£–î–ï–ù–¢.", reply_markup=keyboard)
        return

    await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    homework_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è$"), homework_list)],
        states={
            HOMEWORK_WAITING: [
                MessageHandler(filters.Regex(r"^\d+$"), check_homework),  # –í–≤–æ–¥ ID
                MessageHandler(filters.Regex("^üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), back_to_main_menu)  # –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ],
            "CHECKING": [
                MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–Ω—è—Ç—å$"), accept_homework),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å$"), reject_homework),
            ],
            "COMMENT_WAITING": [MessageHandler(filters.TEXT & ~filters.COMMAND, save_rejection_comment)]
        },
        fallbacks=[]
    )
    homework_submission_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É$"), submit_homework)],
        states={
            HOMEWORK_SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_stack_type)],  # –ù–æ–≤—ã–π —à–∞–≥!
            HOMEWORK_MODULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_topic)],
            HOMEWORK_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_mentor)],
            HOMEWORK_MENTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_for_homework)],
            HOMEWORK_MESSAGE: [MessageHandler(filters.ALL, save_and_forward_homework)],
        },
        fallbacks=[]
    )
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ$"), request_payment)],
        states={
            PAYMENT_WAITING: [MessageHandler(filters.ALL, forward_payment)],  # –û–∂–∏–¥–∞–µ–º —á–µ–∫ –∏ —Å—É–º–º—É
            PAYMENT_CONFIRMATION: [
                MessageHandler(filters.Regex("^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å)$"), confirm_or_reject_payment)]
        },
        fallbacks=[],
        allow_reentry=True  # ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫
    )
    application.add_handler(MessageHandler(filters.Regex(r"^(–ü—Ä–∏–Ω—è—Ç—å|–û—Ç–∫–ª–æ–Ω–∏—Ç—å) \d+$"), confirm_or_reject_payment))
    application.add_handler(MessageHandler(filters.Regex("^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å)$"), confirm_or_reject_payment))

    application.add_handler(payment_handler)
    application.add_handler(homework_handler)
    application.add_handler(homework_submission_handler)
    application.add_handler(CommandHandler("start", start_command))
    application.run_polling()

if __name__ == "__main__":
    main()
