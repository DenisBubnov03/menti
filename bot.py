from telegram.ext import Application, CommandHandler, filters

from commands.admin_functions import request_broadcast_message, send_broadcast
from commands.start_command import start_command
from commands.homework_menti import *
from commands.homework_mentor import *
from commands.payment_menti import request_payment, forward_payment
from commands.payment_mentor import confirm_or_reject_payment
from commands.states import *

from telegram.ext import MessageHandler, ConversationHandler
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    homework_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è$"), homework_list)],
        states={
            HOMEWORK_WAITING: [
                MessageHandler(filters.Regex(r"^\d+$"), check_homework),  # –í–≤–æ–¥ ID
                MessageHandler(filters.Regex("^üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), back_to_main_menu)  # –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ],
            "CHECKING": [
                MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–Ω—è—Ç—å$"), accept_homework),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å$"), reject_homework),
            ],
            "COMMENT_WAITING": [MessageHandler(filters.TEXT & ~filters.COMMAND, save_rejection_comment)]
        },
        fallbacks=[]
    )
    homework_submission_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É$"), submit_homework)],
        states={
            HOMEWORK_SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_stack_type)],  # –ù–æ–≤—ã–π —à–∞–≥!
            HOMEWORK_MODULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_topic)],
            HOMEWORK_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_mentor)],
            HOMEWORK_MENTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_for_homework)],
            HOMEWORK_MESSAGE: [MessageHandler(filters.ALL, save_and_forward_homework)],
        },
        fallbacks=[]
    )
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ$"), request_payment)],
        states={
            PAYMENT_WAITING: [MessageHandler(filters.ALL, forward_payment)],  # –û–∂–∏–¥–∞–µ–º —á–µ–∫ –∏ —Å—É–º–º—É
            PAYMENT_CONFIRMATION: [
                MessageHandler(filters.Regex("^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å)$"), confirm_or_reject_payment)]
        },
        fallbacks=[],
        allow_reentry=True  # ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫
    )
    broadcast_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$"), request_broadcast_message)],
        states={
            BROADCAST_WAITING: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_broadcast)]
        },
        fallbacks=[]
    )

    application.add_handler(broadcast_handler)


    application.add_handler(MessageHandler(filters.Regex(r"^(–ü—Ä–∏–Ω—è—Ç—å|–û—Ç–∫–ª–æ–Ω–∏—Ç—å) \d+$"), confirm_or_reject_payment))
    application.add_handler(MessageHandler(filters.Regex("^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å)$"), confirm_or_reject_payment))

    application.add_handler(payment_handler)
    application.add_handler(homework_handler)
    application.add_handler(homework_submission_handler)
    application.add_handler(CommandHandler("start", start_command))
    application.run_polling()

if __name__ == "__main__":
    main()
