import asyncio
import tracemalloc

from telegram.ext import Application, CommandHandler, filters, CallbackQueryHandler

from commands.call_notifications import run_scheduler, show_mentor_calls
from commands.call_scheduling import request_call, schedule_call_date, schedule_call_time, handle_direction_choice
from commands.admin_functions import request_broadcast_message, send_broadcast, add_mentor_request, save_mentor_name, \
    save_mentor_tg, remove_mentor_request, remove_mentor, WAITING_MENTOR_TG_REMOVE, save_mentor_direction
from commands.start_command import start_command
from commands.homework_menti import *
from commands.homework_mentor import *
from commands.payment_menti import request_payment, forward_payment, request_commission_payment, \
    forward_commission_payment
from commands.payment_mentor import reject_payment, show_pending_payments, check_payment_by_id, confirm_payment
from commands.states import *

import os
from dotenv import load_dotenv

load_dotenv()
tracemalloc.start()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


def main():

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    homework_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è$"), homework_list)],
        states={
            HOMEWORK_WAITING: [
                MessageHandler(filters.Regex(r"^\d+$"), check_homework),  # –í–≤–æ–¥ ID
                MessageHandler(filters.Regex("^üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), back_to_main_menu)  # –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ],
            "CHECKING": [
                MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–Ω—è—Ç—å$"), accept_homework),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å$"), reject_homework),
            ],
            "COMMENT_WAITING": [MessageHandler(filters.TEXT & ~filters.COMMAND, save_rejection_comment)]
        },
        fallbacks=[]
    )
    homework_submission_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É$"), submit_homework)],
        states={
            HOMEWORK_SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_stack_type)],  # –ù–æ–≤—ã–π —à–∞–≥!
            HOMEWORK_MODULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_topic)],
            HOMEWORK_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_mentor)],
            HOMEWORK_MENTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_for_homework)],
            HOMEWORK_MESSAGE: [MessageHandler(filters.ALL, save_and_forward_homework)],
        },
        fallbacks=[]
    )
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ$"), request_payment)],
        states={
            PAYMENT_WAITING: [MessageHandler(filters.ALL, forward_payment)],  # –û–∂–∏–¥–∞–µ–º —á–µ–∫ –∏ —Å—É–º–º—É
        },
        fallbacks=[],
        allow_reentry=True  # ‚úÖ –°—Ç—É–¥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –æ–ø–ª–∞—Ç—É
    )
    broadcast_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$"), request_broadcast_message)],
        states={
            BROADCAST_WAITING: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_broadcast)]
        },
        fallbacks=[]
    )
    mentor_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞$"), add_mentor_request)],
        states={
            WAITING_MENTOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_mentor_name)],
            WAITING_MENTOR_TG_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_mentor_tg)],
            WAITING_MENTOR_DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_mentor_direction)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), lambda update, context: ConversationHandler.END)]
    )
    remove_mentor_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞$"), remove_mentor_request)],
        states={
            WAITING_MENTOR_TG_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_mentor)]
        },
        fallbacks=[]
    )

    call_scheduling_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫$"), request_call)],
        states={
            CALL_SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_direction_choice)],
            CALL_SCHEDULE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_call_date)],
            CALL_SCHEDULE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_call_time)],
            CALL_CONFIRMATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: ConversationHandler.END)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), lambda update, context: ConversationHandler.END)]
    )
    payment_review_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ü–ª–∞—Ç–µ–∂–∏$"), show_pending_payments)],
        states={
            PAYMENT_CONFIRMATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_payment_by_id)
            ],
            "PAYMENT_DECISION": [
                MessageHandler(filters.Regex("^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂$"), confirm_payment),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂$"), reject_payment)
            ]
        },
        fallbacks=[],
        allow_reentry=True
    )
    commission_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∏ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏$"), request_commission_payment)],
        states={
            PAYMENT_WAITING: [MessageHandler(filters.ALL, forward_commission_payment)],
        },
        fallbacks=[],
        allow_reentry=True
    )
    application.add_handler(commission_handler)

    application.add_handler(payment_review_handler)
    application.add_handler(MessageHandler(filters.Regex("^üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∏$"), show_mentor_calls))
    application.add_handler(MessageHandler(filters.Regex("^üí∏ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏$"), request_commission_payment))
    application.add_handler(call_scheduling_handler)
    application.add_handler(remove_mentor_handler)
    application.add_handler(mentor_handler)
    application.add_handler(broadcast_handler)
    application.add_handler(payment_handler)
    application.add_handler(homework_handler)
    application.add_handler(homework_submission_handler)
    application.add_handler(CommandHandler("start", start_command))
    application.run_polling()


if __name__ == "__main__":
    main()
