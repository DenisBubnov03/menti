#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
"""

import re
import os
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import argparse

def parse_log_line(line):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
    patterns = {
        'request_start': r'üöÄ –ó–ê–ü–†–û–° –ù–ê–ß–ê–¢ \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \(ID: (.+?)\) \| –ß–∞—Ç: (.+?) \| –¢–µ–∫—Å—Ç: (.+)',
        'request_success': r'‚úÖ –ó–ê–ü–†–û–° –£–°–ü–ï–®–ï–ù \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å',
        'request_error': r'‚ùå –ó–ê–ü–†–û–° –û–®–ò–ë–ö–ê \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –û—à–∏–±–∫–∞: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å',
        'command_start': r'üéØ –ö–û–ú–ê–ù–î–ê –ù–ê–ß–ê–¢–ê \| –ö–æ–º–∞–Ω–¥–∞: (.+?) \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \(ID: (.+?)\) \| –ß–∞—Ç: (.+)',
        'command_success': r'‚úÖ –ö–û–ú–ê–ù–î–ê –£–°–ü–ï–®–ù–ê \| –ö–æ–º–∞–Ω–¥–∞: (.+?) \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å',
        'command_error': r'‚ùå –ö–û–ú–ê–ù–î–ê –û–®–ò–ë–ö–ê \| –ö–æ–º–∞–Ω–¥–∞: (.+?) \| –§—É–Ω–∫—Ü–∏—è: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –û—à–∏–±–∫–∞: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å',
        'conversation_start': r'üí¨ –†–ê–ó–ì–û–í–û–† –û–ë–†–ê–ë–û–¢–ö–ê \| –û–±—Ä–∞–±–æ—Ç—á–∏–∫: (.+?) \| –°–æ—Å—Ç–æ—è–Ω–∏–µ: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \(ID: (.+?)\) \| –¢–µ–∫—Å—Ç: (.+)',
        'conversation_success': r'‚úÖ –†–ê–ó–ì–û–í–û–† –£–°–ü–ï–®–ï–ù \| –û–±—Ä–∞–±–æ—Ç—á–∏–∫: (.+?) \| –°–æ—Å—Ç–æ—è–Ω–∏–µ: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å',
        'conversation_error': r'‚ùå –†–ê–ó–ì–û–í–û–† –û–®–ò–ë–ö–ê \| –û–±—Ä–∞–±–æ—Ç—á–∏–∫: (.+?) \| –°–æ—Å—Ç–æ—è–Ω–∏–µ: (.+?) \| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: (.+?) \| –û—à–∏–±–∫–∞: (.+?) \| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+?)—Å'
    }
    
    for log_type, pattern in patterns.items():
        match = re.match(pattern, line)
        if match:
            return {
                'type': log_type,
                'data': match.groups(),
                'raw_line': line
            }
    
    return None

def analyze_logs(log_file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç"""
    
    if not os.path.exists(log_file_path):
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file_path}")
        return
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤: {log_file_path}")
    print("=" * 80)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_requests': 0,
        'successful_requests': 0,
        'failed_requests': 0,
        'total_commands': 0,
        'successful_commands': 0,
        'failed_commands': 0,
        'total_conversations': 0,
        'successful_conversations': 0,
        'failed_conversations': 0,
        'users': set(),
        'functions': Counter(),
        'errors': Counter(),
        'execution_times': []
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    requests_data = []
    commands_data = []
    conversations_data = []
    
    with open(log_file_path, 'r', encoding='utf-8') as f:
        for line in f:
            parsed = parse_log_line(line.strip())
            if not parsed:
                continue
            
            log_type = parsed['type']
            data = parsed['data']
            
            if log_type == 'request_start':
                stats['total_requests'] += 1
                stats['users'].add(data[1])  # username
                stats['functions'][data[0]] += 1  # function name
                requests_data.append({
                    'function': data[0],
                    'user': data[1],
                    'user_id': data[2],
                    'chat_id': data[3],
                    'text': data[4],
                    'status': 'pending'
                })
                
            elif log_type == 'request_success':
                stats['successful_requests'] += 1
                execution_time = float(data[2])
                stats['execution_times'].append(execution_time)
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
                for req in requests_data:
                    if req['function'] == data[0] and req['user'] == data[1]:
                        req['status'] = 'success'
                        req['execution_time'] = execution_time
                        break
                        
            elif log_type == 'request_error':
                stats['failed_requests'] += 1
                execution_time = float(data[3])
                error_msg = data[2]
                stats['errors'][error_msg] += 1
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
                for req in requests_data:
                    if req['function'] == data[0] and req['user'] == data[1]:
                        req['status'] = 'error'
                        req['execution_time'] = execution_time
                        req['error'] = error_msg
                        break
                        
            elif log_type == 'command_start':
                stats['total_commands'] += 1
                commands_data.append({
                    'command': data[0],
                    'function': data[1],
                    'user': data[2],
                    'user_id': data[3],
                    'chat_id': data[4],
                    'status': 'pending'
                })
                
            elif log_type == 'command_success':
                stats['successful_commands'] += 1
                execution_time = float(data[3])
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                for cmd in commands_data:
                    if cmd['command'] == data[0] and cmd['user'] == data[2]:
                        cmd['status'] = 'success'
                        cmd['execution_time'] = execution_time
                        break
                        
            elif log_type == 'command_error':
                stats['failed_commands'] += 1
                execution_time = float(data[4])
                error_msg = data[3]
                stats['errors'][error_msg] += 1
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                for cmd in commands_data:
                    if cmd['command'] == data[0] and cmd['user'] == data[2]:
                        cmd['status'] = 'error'
                        cmd['execution_time'] = execution_time
                        cmd['error'] = error_msg
                        break
                        
            elif log_type == 'conversation_start':
                stats['total_conversations'] += 1
                conversations_data.append({
                    'handler': data[0],
                    'state': data[1],
                    'user': data[2],
                    'user_id': data[3],
                    'text': data[4],
                    'status': 'pending'
                })
                
            elif log_type == 'conversation_success':
                stats['successful_conversations'] += 1
                execution_time = float(data[3])
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
                for conv in conversations_data:
                    if conv['handler'] == data[0] and conv['user'] == data[2]:
                        conv['status'] = 'success'
                        conv['execution_time'] = execution_time
                        break
                        
            elif log_type == 'conversation_error':
                stats['failed_conversations'] += 1
                execution_time = float(data[4])
                error_msg = data[3]
                stats['errors'][error_msg] += 1
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
                for conv in conversations_data:
                    if conv['handler'] == data[0] and conv['user'] == data[2]:
                        conv['status'] = 'error'
                        conv['execution_time'] = execution_time
                        conv['error'] = error_msg
                        break
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['successful_requests']}")
    print(f"   –û—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['failed_requests']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {(stats['successful_requests']/stats['total_requests']*100):.1f}%" if stats['total_requests'] > 0 else "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: N/A")
    
    print(f"\n   –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats['total_commands']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {stats['successful_commands']}")
    print(f"   –û—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥: {stats['failed_commands']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥: {(stats['successful_commands']/stats['total_commands']*100):.1f}%" if stats['total_commands'] > 0 else "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥: N/A")
    
    print(f"\n   –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats['total_conversations']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats['successful_conversations']}")
    print(f"   –û—à–∏–±–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats['failed_conversations']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {(stats['successful_conversations']/stats['total_conversations']*100):.1f}%" if stats['total_conversations'] > 0 else "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: N/A")
    
    print(f"\n   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    print("\nüîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –§–£–ù–ö–¶–ò–Ø–ú:")
    for func, count in stats['functions'].most_common(10):
        print(f"   {func}: {count} –≤—ã–∑–æ–≤–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
    if stats['errors']:
        print("\n‚ùå –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–®–ò–ë–ö–ê–ú:")
        for error, count in stats['errors'].most_common(5):
            print(f"   {error}: {count} —Ä–∞–∑")
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if stats['execution_times']:
        avg_time = sum(stats['execution_times']) / len(stats['execution_times'])
        max_time = max(stats['execution_times'])
        min_time = min(stats['execution_times'])
        print(f"\n‚è± –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f}—Å")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f}—Å")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    print("\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:")
    error_count = 0
    for req in requests_data:
        if req.get('status') == 'error' and error_count < 5:
            print(f"   {req['function']} - {req['user']}: {req.get('error', 'Unknown error')}")
            error_count += 1
    
    for cmd in commands_data:
        if cmd.get('status') == 'error' and error_count < 5:
            print(f"   {cmd['command']} - {cmd['user']}: {cmd.get('error', 'Unknown error')}")
            error_count += 1
    
    for conv in conversations_data:
        if conv.get('status') == 'error' and error_count < 5:
            print(f"   {conv['handler']} - {conv['user']}: {conv.get('error', 'Unknown error')}")
            error_count += 1

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –±–æ—Ç–∞')
    parser.add_argument('--log-file', '-f', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤')
    parser.add_argument('--latest', '-l', action='store_true', help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤')
    
    args = parser.parse_args()
    
    if args.latest:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        log_dir = 'logs'
        if not os.path.exists(log_dir):
            print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        log_files = [f for f in os.listdir(log_dir) if f.startswith('bot_') and f.endswith('.log')]
        if not log_files:
            print("‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        latest_log = max(log_files, key=lambda x: os.path.getctime(os.path.join(log_dir, x)))
        log_file_path = os.path.join(log_dir, latest_log)
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {latest_log}")
        
    elif args.log_file:
        log_file_path = args.log_file
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        log_dir = 'logs'
        if not os.path.exists(log_dir):
            print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        log_files = [f for f in os.listdir(log_dir) if f.startswith('bot_') and f.endswith('.log')]
        if not log_files:
            print("‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        latest_log = max(log_files, key=lambda x: os.path.getctime(os.path.join(log_dir, x)))
        log_file_path = os.path.join(log_dir, latest_log)
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {latest_log}")
    
    analyze_logs(log_file_path)

if __name__ == "__main__":
    main() 