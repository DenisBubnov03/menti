import logging
import functools
import time
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

def log_request(func_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
    
    Args:
        func_name: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = update.effective_user
            user_info = {
                'id': user.id if user else 'Unknown',
                'username': user.username if user else 'Unknown',
                'first_name': user.first_name if user else 'Unknown',
                'last_name': user.last_name if user else 'Unknown'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            request_info = {
                'function': func_name or func.__name__,
                'chat_id': update.effective_chat.id if update.effective_chat else 'Unknown',
                # 'message_type': update.message.content_type if update.message else 'Unknown',
                'text': update.message.text[:100] + '...' if update.message and update.message.text and len(update.message.text) > 100 else (update.message.text if update.message else 'No text'),
                'timestamp': datetime.now().isoformat()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üöÄ –ó–ê–ü–†–û–° –ù–ê–ß–ê–¢ | –§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} (ID: {user_info['id']}) | "
                       f"–ß–∞—Ç: {request_info['chat_id']} | "
                       f"–¢–µ–∫—Å—Ç: {request_info['text']}")
            
            start_time = time.time()
            success = False
            error = None
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(update, context, *args, **kwargs)
                success = True
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                logger.info(f"‚úÖ –ó–ê–ü–†–û–° –£–°–ü–ï–®–ï–ù | –§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                return result
                
            except Exception as e:
                success = False
                error = str(e)
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logger.error(f"‚ùå –ó–ê–ü–†–û–° –û–®–ò–ë–ö–ê | –§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–û—à–∏–±–∫–∞: {error} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                raise
                
        return wrapper
    return decorator

def log_command(command_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    
    Args:
        command_name: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = update.effective_user
            user_info = {
                'id': user.id if user else 'Unknown',
                'username': user.username if user else 'Unknown',
                'first_name': user.first_name if user else 'Unknown',
                'last_name': user.last_name if user else 'Unknown'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            command = command_name or (update.message.text.split()[0] if update.message and update.message.text else 'Unknown')
            
            request_info = {
                'command': command,
                'function': func.__name__,
                'chat_id': update.effective_chat.id if update.effective_chat else 'Unknown',
                'timestamp': datetime.now().isoformat()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã
            logger.info(f"üéØ –ö–û–ú–ê–ù–î–ê –ù–ê–ß–ê–¢–ê | –ö–æ–º–∞–Ω–¥–∞: {request_info['command']} | "
                       f"–§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} (ID: {user_info['id']}) | "
                       f"–ß–∞—Ç: {request_info['chat_id']}")
            
            start_time = time.time()
            success = False
            error = None
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(update, context, *args, **kwargs)
                success = True
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                logger.info(f"‚úÖ –ö–û–ú–ê–ù–î–ê –£–°–ü–ï–®–ù–ê | –ö–æ–º–∞–Ω–¥–∞: {request_info['command']} | "
                           f"–§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                return result
                
            except Exception as e:
                success = False
                error = str(e)
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–º–∞–Ω–¥—ã
                logger.error(f"‚ùå –ö–û–ú–ê–ù–î–ê –û–®–ò–ë–ö–ê | –ö–æ–º–∞–Ω–¥–∞: {request_info['command']} | "
                           f"–§—É–Ω–∫—Ü–∏—è: {request_info['function']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–û—à–∏–±–∫–∞: {error} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                raise
                
        return wrapper
    return decorator

def log_conversation_handler(handler_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    
    Args:
        handler_name: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = update.effective_user
            user_info = {
                'id': user.id if user else 'Unknown',
                'username': user.username if user else 'Unknown',
                'first_name': user.first_name if user else 'Unknown',
                'last_name': user.last_name if user else 'Unknown'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_state = context.user_data.get('conversation_state', 'Unknown')
            
            request_info = {
                'handler': handler_name or func.__name__,
                'conversation_state': conversation_state,
                'chat_id': update.effective_chat.id if update.effective_chat else 'Unknown',
                'text': update.message.text[:100] + '...' if update.message and update.message.text and len(update.message.text) > 100 else (update.message.text if update.message else 'No text'),
                'timestamp': datetime.now().isoformat()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info(f"üí¨ –†–ê–ó–ì–û–í–û–† –û–ë–†–ê–ë–û–¢–ö–ê | –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {request_info['handler']} | "
                       f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {request_info['conversation_state']} | "
                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} (ID: {user_info['id']}) | "
                       f"–¢–µ–∫—Å—Ç: {request_info['text']}")
            
            start_time = time.time()
            success = False
            error = None
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(update, context, *args, **kwargs)
                success = True
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                logger.info(f"‚úÖ –†–ê–ó–ì–û–í–û–† –£–°–ü–ï–®–ï–ù | –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {request_info['handler']} | "
                           f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {request_info['conversation_state']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                return result
                
            except Exception as e:
                success = False
                error = str(e)
                execution_time = time.time() - start_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logger.error(f"‚ùå –†–ê–ó–ì–û–í–û–† –û–®–ò–ë–ö–ê | –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {request_info['handler']} | "
                           f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {request_info['conversation_state']} | "
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']} | "
                           f"–û—à–∏–±–∫–∞: {error} | "
                           f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
                
                # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                raise
                
        return wrapper
    return decorator 